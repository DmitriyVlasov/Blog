<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Дмитрий Власов on Дмитрий Власов</title>
    <link>http://DmitriyVlasov.ru/</link>
    <description>Recent content in Дмитрий Власов on Дмитрий Власов</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>&amp;copy; Creative Commons Attribution-ShareAlike 3.0 Unported</copyright>
    <lastBuildDate>Sat, 28 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Глава 1. Вступление</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/01-preliminaries/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/01-preliminaries/</guid>
      <description>&lt;p&gt;FParsec состоит из двух DLL файлов: &lt;em&gt;FParsec.dll&lt;/em&gt; и &lt;em&gt;FParsecCS.dll&lt;/em&gt;. Для использования FParsec в вашем проекте, вы можете или установить из &lt;a href=&#34;http://nuget.org&#34; target=&#34;_blank&#34;&gt;nuget&lt;/a&gt; (см. подробнее варианты установки &lt;a href=&#34;http://www.quanttec.com/fparsec/download-and-installation.html#nuget-packages&#34; target=&#34;_blank&#34;&gt;nuget-пакетов&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;), или собрать два DLL файла FParsec из исходного кода. Самый простой способ собрать FParsec из исходного кода это использовать файлы решений Visual Studio в каталогах &lt;code&gt;Build/VS...&lt;/code&gt; &lt;a href=&#34;https://bitbucket.org/fparsec/main/get/tip.zip&#34; target=&#34;_blank&#34;&gt;исходного кода пакета&lt;/a&gt;, например, в каталоге &lt;code&gt;Build/VS11&lt;/code&gt; для Visual Studio 2012. Любой проект, который использует библиотеку FParsec должен ссылаться на оба файла DLL. Смотри подробнее в руководстве пользователя главу &lt;a href=&#34;http://www.quanttec.com/fparsec/download-and-installation.html&#34; target=&#34;_blank&#34;&gt;Загрузка и установка&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Все типы и модули библиотеки FParsec объявлены в пространстве имен &lt;code&gt;FParsec&lt;/code&gt;. Это пространство имен содержит несколько базовых классов (например, &lt;code&gt;CharStream&lt;/code&gt; и &lt;code&gt;Reply&lt;/code&gt;) и четыре F# модуля, а именно:
- &lt;code&gt;Primitives&lt;/code&gt;, содержащий основные определения типов и комбинаторов синтаксического анализа,
- &lt;code&gt;CharParsers&lt;/code&gt;, содержащий синтаксические анализаторы для символов, строк, чисел и функций для применения синтаксических анализаторов для входных потоков,
- &lt;code&gt;Error&lt;/code&gt;, содержащий типы и вспомогательные функции для создания, обработки, форматирования сообщений об ошибках синтаксического анализа,
- &lt;code&gt;StaticMapping&lt;/code&gt;, содержащий функции для создания оптимизированных функций отображения между ключами и значениями.&lt;/p&gt;

&lt;p&gt;Во всех примерах в этом учебнике предполагается, что вы открыли пространство имен FParsec:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open FParsec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;При открытии пространства имен &lt;code&gt;FParsec&lt;/code&gt; также автоматически открываются модули &lt;code&gt;Primitives&lt;/code&gt;, &lt;code&gt;CharParsers&lt;/code&gt; и &lt;code&gt;Error&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Все примеры кода в этом учебнике содержатся в проекте &lt;a href=&#34;https://bitbucket.org/fparsec/main/src/c234349e7b738e09a1b9eb53f5f1ef77d584f09b/Samples/Tutorial/tutorial.fs?at=default&#34; target=&#34;_blank&#34;&gt;Samples/Tutorial&lt;/a&gt;. Читая учебник может быть весьма полезным держать этот проект открытым в окне редактора Visual Studio. Например, вы можете навести курсор мыши на идентификатор, чтобы получить всплывающее окно Intellisense с выведенным типом. А если вам интересно, как функция библиотеки реализована, вы можете открыть контекстное меню и выбрать &lt;em&gt;Перейти к определению (F12)&lt;/em&gt;.&lt;/p&gt;

&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Глава 2. Синтаксический анализатор числа с плавающей точкой</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/02-parsing-a-single-float/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/02-parsing-a-single-float/</guid>
      <description>&lt;p&gt;Синтаксический разбор входного потока включает два этапа:
  1. построение синтаксического анализатора и
  1. применение анализатора к входному потоку.&lt;/p&gt;

&lt;p&gt;Давайте начнем с простого примера: синтаксический разбор строки представляющей собой отдельное число с плавающей точкой.
В этом случае первый шаг &amp;mdash; построение синтаксического анализатора, просто, поскольку модуль &lt;code&gt;CharParsers&lt;/code&gt; уже поставляется со встроенным анализатором числа с плавающей точкой:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val pfloat: Parser&amp;lt;float,&#39;u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Универсальный тип &lt;code&gt;Parser&amp;lt;&#39;Result,&#39;UserState&amp;gt;&lt;/code&gt; является типом всех синтаксических анализаторов в библиотеке FParsec. Если вы перейдете по следующей гиперссылке, вы увидите, что &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.Parser&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt; является &lt;a href=&#34;https://msdn.microsoft.com/ru-ru/library/dd233246.aspx&#34; target=&#34;_blank&#34;&gt;синонимом&lt;/a&gt; для функционального типа. Однако, на данный момент мы не должны вдаваться в подробности типа &lt;code&gt;Parser&lt;/code&gt;. Достаточно отметить, что первый аргумент типа представляет тип результата синтаксического анализа. Итак, в рассматриваемом случае тип функции &lt;code&gt;pfloat&lt;/code&gt; говорит нам, что, если синтаксический анализ успешно завершен, функция возвращает число с плавающей точкой типа &lt;code&gt;float&lt;/code&gt;. Мы не будем использовать &amp;ldquo;пользовательское состояние&amp;rdquo; в этом уроке, так что, на данный момент, вы можете просто игнорировать второй аргумент типа.&lt;/p&gt;

&lt;p&gt;Чтобы применить синтаксический анализатор &lt;code&gt;pfloat&lt;/code&gt; к строке, мы можем использовать функцию &lt;code&gt;run&lt;/code&gt; из модуля &lt;code&gt;CharParsers&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val run: Parser&amp;lt;&#39;Result, unit&amp;gt; -&amp;gt; string -&amp;gt; ParserResult&amp;lt;&#39;Result,unit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Функция &lt;code&gt;run&lt;/code&gt;, простейшая из &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#interface.runparser-functions&#34; target=&#34;_blank&#34;&gt;ряда&lt;/a&gt; функций модуля &lt;code&gt;CharParsers&lt;/code&gt;, используется для запуска синтаксических анализаторов по входным данным. Другие функции позволяют вам, например, запускать синтаксические анализаторы по содержимому файла или &lt;code&gt;System.IO.Stream&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Функция &lt;code&gt;run&lt;/code&gt; применяет синтаксический анализатор, переданный в качестве первого аргумента к строке переданной в качестве второго аргумента и возвращает возвращенное синтаксическим анализатором значение в виде &lt;code&gt;ParserResult&lt;/code&gt;. Тип &lt;code&gt;ParserResult&lt;/code&gt; является типом размеченного объединения с двумя вариантами: &lt;code&gt;Success&lt;/code&gt; и &lt;code&gt;Failure&lt;/code&gt;. В случае, если синтаксический анализатор успешно выполнен, &lt;code&gt;ParserResult&lt;/code&gt; содержит результирующее значение, в противном случае он содержит сообщение об ошибке.&lt;/p&gt;

&lt;p&gt;Для упрощения тестирования мы напишем маленькую вспомогательную функцию, которая выводит на печать значение результата или сообщение об ошибке:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let test p str =
    match run p str with
    | Success(result, _, _)   -&amp;gt; printfn &amp;quot;Success: %A&amp;quot; result
    | Failure(errorMsg, _, _) -&amp;gt; printfn &amp;quot;Failure: %s&amp;quot; errorMsg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Используя вспомогательную функцию, мы можем протестировать &lt;code&gt;pfloat&lt;/code&gt; выполнив:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test pfloat &amp;quot;1.25&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;что дает в результате:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Success: 1.25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Тестирование &lt;code&gt;pfloat&lt;/code&gt; с числовым литералом, который имеет недопустимый знак экспоненты&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test pfloat &amp;quot;1.25E 3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;дает сообщение об ошибке&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failure: Error in Ln: 1 Col: 6
1.25E 3
     ^
Expecting: decimal digit
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Глава 3. Синтаксический анализатор числа с плавающей точкой в скобках</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/03-parsing-a-float-between-brackets/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/03-parsing-a-float-between-brackets/</guid>
      <description>&lt;p&gt;Реализация синтаксических анализаторов с использованием библиотеки FParsec обычно означает, что высокоуровневые синтаксические анализаторы получены как комбинация низкоуровневых анализаторов. Вы начинаете с анализатора примитивов, предоставляемых библиотекой, а затем последовательно объединяете их в анализаторы более высокого уровня, пока вы, наконец, не имеете один синтаксический анализатор для полной обработки входных данных.&lt;/p&gt;

&lt;p&gt;В следующих главах мы продемонстрируем этот подход, обсуждая различные варианты примеров синтаксических анализаторов, которые построены друг из друга. В этой главе мы начнем с очень простого анализатора для числа с плавающей точкой в скобках:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let str s = pstring s
let floatBetweenBrackets = str &amp;quot;[&amp;quot; &amp;gt;&amp;gt;. pfloat .&amp;gt;&amp;gt; str &amp;quot;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Если вы пытаетесь скомпилировать этот или другой фрагмент кода, и вы получаете ошибку компилятора F# &amp;ldquo;value restriction&amp;rdquo;, пожалуйста посмотрите &lt;a href=&#34;../10-fsharps-value-restriction&#34;&gt;главу 10 Ограничение значений F#&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Определение &lt;code&gt;str&lt;/code&gt; и &lt;code&gt;floatBetweenBrackets&lt;/code&gt; включает в себя три библиотечные функции, которые мы ранее не рассматривали: &lt;code&gt;pstring&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;.&lt;/code&gt; и &lt;code&gt;&amp;gt;&amp;gt;.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Функция&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val pstring: string -&amp;gt; Parser&amp;lt;string,&#39;u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;принимает строку в качестве аргумента и возвращает синтаксический анализатор для этой строки. Когда анализатор применяется к входному потоку он проверяет соответствуют ли символы во входном потоке строке, заданной в аргументе. Если символы полностью совпадают со строкой, анализатор поглощает их, то есть пропускает и идет дальше. В противном случае он не исполнится и не поглотит входные данные. Когда анализатор успешно обрабатывает, он также возвращает данную строку в качестве результата анализатора, но, поскольку строка константа, вы будете редко использовать этот результат.&lt;/p&gt;

&lt;p&gt;Функция &lt;code&gt;pstring&lt;/code&gt; не называется &lt;code&gt;string&lt;/code&gt;, потому что иначе она скроет встроенную в F# функцию &lt;code&gt;string&lt;/code&gt;. Как правило, имена синтаксических анализаторов в FParsec, которые конфликтуют со встроенными именами функций в F#, имеют префикс &amp;mdash; символ р. Функция &lt;code&gt;pfloat&lt;/code&gt; еще один пример этого соглашения об именах.&lt;/p&gt;

&lt;p&gt;Для экономии нескольких нажатий клавиш, мы сокращаем &lt;code&gt;pstring&lt;/code&gt; как &lt;code&gt;str&lt;/code&gt;. Так, например, &lt;code&gt;str &amp;quot;[&amp;quot;&lt;/code&gt; это синтаксический анализатор, который пропускает символ &lt;code&gt;&#39;[&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Бинарные операторы  &lt;code&gt;&amp;gt;&amp;gt;.&lt;/code&gt; и  &lt;code&gt;.&amp;gt;&amp;gt;&lt;/code&gt; имеет следующие типы:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val (&amp;gt;&amp;gt;.): Parser&amp;lt;&#39;a,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;b,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;b,&#39;u&amp;gt;
val (.&amp;gt;&amp;gt;): Parser&amp;lt;&#39;a,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;b,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;a,&#39;u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Как вы можете видеть из этих сигнатур, оба оператора являются комбинаторами синтаксических анализаторов, которые строят новый анализатор из двух аргументов &amp;mdash; синтаксических анализаторов. Синтаксический анализатор &lt;code&gt;p1 &amp;gt;&amp;gt;. p2&lt;/code&gt; разбирает &lt;code&gt;p1&lt;/code&gt; и &lt;code&gt;p2&lt;/code&gt; последовательно и возвращает результат &lt;code&gt;p2&lt;/code&gt;. Синтаксический анализатор &lt;code&gt;p1 .&amp;gt;&amp;gt; p2&lt;/code&gt; также разбирает &lt;code&gt;p1&lt;/code&gt; и &lt;code&gt;p2&lt;/code&gt; последовательно, но возвращает результат &lt;code&gt;p1&lt;/code&gt; вместо &lt;code&gt;p2&lt;/code&gt;. В каждом случае точка указывает на сторону синтаксического анализатора, результат которого возвращается. Объединив оба оператора в &lt;code&gt;p1 &amp;gt;&amp;gt;. р2 .&amp;gt;&amp;gt; p3&lt;/code&gt; мы получим синтаксический анализатор, который разбирает &lt;code&gt;p1&lt;/code&gt;, &lt;code&gt;p2&lt;/code&gt; и &lt;code&gt;p3&lt;/code&gt; последовательно и возвращает результат &lt;code&gt;p2&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Касательно несколько неточной формулировки &amp;ldquo;разбирает &lt;code&gt;p1&lt;/code&gt; и &lt;code&gt;p2&lt;/code&gt; последовательно&amp;rdquo; мы на самом деле имели в виду: синтаксический анализатор &lt;code&gt;p1&lt;/code&gt; применяется к входным данным, и если &lt;code&gt;p1&lt;/code&gt; успешно исполнен, то &lt;code&gt;p2&lt;/code&gt; применяется к остальной части входных данных. В случае если любой из двух элементов синтаксического анализатора не исполнился, совокупный синтаксический анализатор сразу передает сообщение об ошибке.&lt;/p&gt;

&lt;p&gt;В документации библиотеки FParsec мы часто используем такие выражения, как &amp;ldquo;синтаксический анализ &lt;code&gt;p&lt;/code&gt;&amp;rdquo; или &amp;ldquo;синтаксический анализ вхождения &lt;code&gt;p&lt;/code&gt;&amp;rdquo;. Вместо этого технически более точным &amp;ldquo;применяется синтаксический анализатор &lt;code&gt;p&lt;/code&gt; к остатку входных данных и если &lt;code&gt;p&lt;/code&gt; успешно исполнен&amp;hellip;&amp;ldquo;, надеясь, что точное значение очевидно из контекста.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Следующие тесты показывают, что &lt;code&gt;floatBetweenBrackets&lt;/code&gt; разбирает правильные входные данные, как и ожидалось, и дает информативные сообщения об ошибках, когда он сталкивается с неправильными входными данными:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test floatBetweenBrackets &amp;quot;[1.0]&amp;quot;;;
Success: 1.0

&amp;gt; test floatBetweenBrackets &amp;quot;[]&amp;quot;;;
Failure: Error in Ln: 1 Col: 2
[]
 ^
Expecting: floating-point number

&amp;gt; test floatBetweenBrackets &amp;quot;[1.0&amp;quot;;;
Failure: Error in Ln: 1 Col: 5
[1.0
    ^
Note: The error occurred at the end of the input stream.
Expecting: &#39;]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Обратите внимание, что все инфиксные F# операторы, которые начинаются с &lt;code&gt;&amp;lt;&lt;/code&gt; или &lt;code&gt;&amp;gt;&lt;/code&gt; (ведущие символы &lt;code&gt;.&lt;/code&gt; игнорируются) являются левоассоциативными.&lt;/li&gt;
&lt;li&gt;Следовательно, &lt;code&gt;p1 &amp;gt;&amp;gt;. р2 .&amp;gt;&amp;gt; p3&lt;/code&gt; эквивалентно &lt;code&gt;(p1 &amp;gt;&amp;gt;. p2) .&amp;gt;&amp;gt; p3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Тем не менее, в этом случае ассоциативность не имеет никакого влияния на совокупное поведение синтаксического анализатора.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Глава 4. Абстрактные синтаксические анализаторы</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/04-abstracting-parsers/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/04-abstracting-parsers/</guid>
      <description>&lt;p&gt;Одной из самых больших сильных сторон FParsec является легкость, с которой вы можете определить свои собственные абстрактные синтаксические анализаторы.&lt;/p&gt;

&lt;p&gt;Возьмем, к примеру &lt;code&gt;floatBetweenBrackets&lt;/code&gt; из предыдущей главы. Если вы намерены также разобрать другие элементы между строк, вы можете определить свой собственный специализированный комбинатор для этой цели:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let betweenStrings s1 s2 p = str s1 &amp;gt;&amp;gt;. p .&amp;gt;&amp;gt; str s2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Затем можно определить &lt;code&gt;floatInBrackets&lt;/code&gt; и другие синтаксические анализаторы с помощью этого комбинатора:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let floatBetweenBrackets = pfloat |&amp;gt; betweenStrings &amp;quot;[&amp;quot; &amp;quot;]&amp;quot;
let floatBetweenDoubleBrackets = pfloat |&amp;gt; betweenStrings &amp;quot;[[&amp;quot; &amp;quot;]]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;В случае, если вы новичок в F#: &lt;code&gt;pfloat |&amp;gt; betweenStrings &amp;quot;[&amp;quot; &amp;quot;]&amp;quot;&lt;/code&gt; это просто еще один способ, чтобы написать &lt;code&gt;betweenStrings &amp;quot;[&amp;quot; &amp;quot;]&amp;quot; pfloat&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;В тот момент, как вы заметите, что вам часто нужно применять синтаксический анализатор между двумя другими, вы можете пойти дальше, представив функцию &lt;code&gt;betweenStrings&lt;/code&gt; следующим образом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let between pBegin pEnd p  = pBegin &amp;gt;&amp;gt;. p .&amp;gt;&amp;gt; pEnd
let betweenStrings s1 s2 p = p |&amp;gt; between (str s1) (str s2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;На самом деле, вам не нужно определять &lt;code&gt;between&lt;/code&gt;, потому что это уже встроенный комбинатор FParsec.&lt;/p&gt;

&lt;p&gt;Все это, конечно, простые примеры. Но поскольку FParsec это лишь библиотека F#, а не какой-то внешний инструмент для генерации синтаксического анализатора, нет никаких ограничений на абстракции, которые можно определять. Вы можете написать функции, которые принимают любые, необходимые вам, входные данные, делают на входных данных вычисления произвольной сложности, а затем возвращают синтаксический анализатор специального назначения или комбинатор синтаксических анализаторов.&lt;/p&gt;

&lt;p&gt;Например, вы можете написать функцию, которая принимает шаблон регулярного выражения в качестве входных данных и возвращает &lt;code&gt;Parser&lt;/code&gt; для разбора входных данных, соответствующих этому шаблону. Эта функция может использовать другой синтаксический анализатор для разбора шаблона регулярного выражения в абстрактное синтаксическое дерево, а затем компилировать абстрактное синтаксическое дерево в функцию синтаксического анализатора специального назначения. Кроме того, она может построить регулярное выражение .NET из шаблона, а затем вернуть функцию синтаксического анализатора, которая использует интерфейс прикладного программирования модуля &lt;code&gt;CharStream&lt;/code&gt; библиотеки FParsec для непосредственного применения регулярного выражения к входному потоку (который является на самом деле встроенным синтаксический анализатором &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.regex&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/a&gt; модуля &lt;code&gt;CharStream&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Другой пример &amp;mdash; расширяемые приложения синтаксического анализатора. При хранении функций синтаксического анализатора в словарях или других структурах данных и определении соответствующего расширенного протокола, вы можете разрешить подключаемым модулям динамически регистрировать новые синтаксические анализаторы или изменять существующие.&lt;/p&gt;

&lt;p&gt;Возможности действительно бесконечны. Но прежде, чем вы сможете в полной мере использовать эти возможности, вам сначала необходимо ознакомиться с основами FParsec.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Глава 5. Синтаксический анализатор списка чисел с плавающей точкой</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/05-parsing-a-list-of-floats/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/05-parsing-a-list-of-floats/</guid>
      <description>&lt;p&gt;Мы уже течение трех глав обсуждаем как делать синтаксический разбор одного числа с плавающей запятой, поэтому в этот раз мы попытаемся нечто более амбициозное: синтаксический разбор списка чисел с плавающей точкой.&lt;/p&gt;

&lt;p&gt;Предположим сначала, что нам нужно, чтобы делать синтаксический разбор последовательности чисел с плавающей точкой в скобках, т.е. текст в формате &lt;a href=&#34;https://ru.wikipedia.org/wiki/Расширенная_форма_Бэкуса_—_Наура&#34; target=&#34;_blank&#34;&gt;расширенной формы Бэкуса-Наура&lt;/a&gt; (далее РБНФ): &lt;code&gt;(&amp;quot;[&amp;quot; float &amp;quot;]&amp;quot;)*&lt;/code&gt;. Допустимые входные строки в этом формате, например: &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;[1.0]&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;[2][3][4]&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Поскольку у нас уже есть синтаксический анализатор для числа с плавающей точкой в скобках, нам нужен только способ неоднократно применять этот синтаксический анализатор для разбора последовательности. Именно это этого предназначен комбинатор &lt;code&gt;many&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val many: Parser&amp;lt;&#39;a,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;a list,&#39;u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Синтаксический анализатор &lt;code&gt;many p&lt;/code&gt; повторно применяет синтаксический анализатор &lt;code&gt;p&lt;/code&gt; до тех пор пока &lt;code&gt;p&lt;/code&gt; не потерпит неудачу, другими словами он &amp;ldquo;жадно&amp;rdquo; разбирает максимально возможное количество вхождений &lt;code&gt;p&lt;/code&gt;. Результаты &lt;code&gt;p&lt;/code&gt; возвращаются в виде списка в порядке появления.&lt;/p&gt;

&lt;p&gt;Несколько простых тестов показывают, что &lt;code&gt;many floatInBrackets&lt;/code&gt; работает, как ожидалось:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test (many floatBetweenBrackets) &amp;quot;&amp;quot;;;
Success: []

&amp;gt; test (many floatBetweenBrackets) &amp;quot;[1.0]&amp;quot;;;
Success: [1.0]

&amp;gt; test (many floatBetweenBrackets) &amp;quot;[2][3][4]&amp;quot;;;
Success: [2.0; 3.0; 4.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если в результате &lt;em&gt;потребления входных данных&lt;/em&gt; &lt;code&gt;floatBetweenBrackets&lt;/code&gt; вызывает исключение, то комбинированный синтаксический анализатор также вызывает исключение:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test (many floatBetweenBrackets) &amp;quot;[1][2.0E]&amp;quot;;;

Failure: Error in Ln: 1 Col: 9
[1][2.0E]
        ^
Expecting: decimal digit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Обратите внимание, что &lt;code&gt;many&lt;/code&gt; также успешно исполняется для пустой последовательности. Если вы хотите, чтобы требовался, по крайней мере, один элемент во входной последовательности, вы сможете использовать вместо этого &lt;code&gt;many1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test (many1 floatBetweenBrackets) &amp;quot;(1)&amp;quot;;;
Failure: Error in Ln: 1 Col: 1
(1)
^
Expecting: &#39;[&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Если вы предпочитаете, чтобы последнее сообщение об ошибке было сформулировано в терминах более высокого уровневого синтаксического анализатора &lt;code&gt;floatBetweenBrackets&lt;/code&gt; вместо низкоуровневого синтаксического анализатора &lt;code&gt;str &amp;quot;[&amp;quot;&lt;/code&gt;, вы можете использовать оператор &lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt;, как в следующем примере:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test (many1 (floatBetweenBrackets &amp;lt;?&amp;gt; &amp;quot;float between brackets&amp;quot;)) &amp;quot;(1)&amp;quot;;;
Failure: Error in Ln: 1 Col: 1
(1)
^
Expecting: float between brackets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Пожалуйста, смотрите главу &lt;a href=&#34;http://www.quanttec.com/fparsec/users-guide/customizing-error-messages.html&#34; target=&#34;_blank&#34;&gt;5.8 Customizing error messages&lt;sup&gt;en&lt;/sup&gt;&lt;/a&gt; руководства пользователя, чтобы узнать больше о настройке сообщений об ошибках.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Если вам не нужен результат работы синтаксического анализатора и просто хотите пропустить полученный список, вы можете использовать оптимизированные комбинаторы &lt;code&gt;skipMany&lt;/code&gt; или &lt;code&gt;skipMany1&lt;/code&gt; вместо &lt;code&gt;many&lt;/code&gt; и &lt;code&gt;many1&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Другим часто используемым комбинатором для синтаксического разбора последовательностей является &lt;code&gt;sepBy&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val sepBy: Parser&amp;lt;&#39;a,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;b,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;a list, &#39;u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sepBy&lt;/code&gt; принимает два параметра синтаксический анализатор «элемент» и «разделитель» и возвращает синтаксический анализатор для списка элементов. В нотации РНБН &lt;code&gt;sepBy p pSep&lt;/code&gt; может быть записана как &lt;code&gt;(p (pSep p)*)?&lt;/code&gt;, Подобно &lt;code&gt;many&lt;/code&gt;, существует &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#interface.sepBy-parsers&#34; target=&#34;_blank&#34;&gt;несколько вариантов&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; &lt;code&gt;sepBy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;С помощью &lt;code&gt;sepBy&lt;/code&gt; мы можем сделать синтаксический разбор более реального формата списка чисел, где числа с плавающей точкой разделены запятой. Формате РНБН:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-EBNF&#34;&gt;floatList: &amp;quot;[&amp;quot; (float (&amp;quot;,&amp;quot; float)*)? &amp;quot;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Допустимыми строками в этом формате являются, например: &lt;code&gt;&amp;quot;[]&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;[1.0]&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;[2,3,4]&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Дословной реализацией этого формата будет следующий синтаксический анализатор:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let floatList = str &amp;quot;[&amp;quot; &amp;gt;&amp;gt;. sepBy pfloat (str &amp;quot;,&amp;quot;) .&amp;gt;&amp;gt; str &amp;quot;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Тестирование &lt;code&gt;floatList&lt;/code&gt; с корректными строками дает ожидаемый результат:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test floatList &amp;quot;[]&amp;quot;;;
Success: []
&amp;gt; test floatList &amp;quot;[1.0]&amp;quot;;;
Success: [1.0]
&amp;gt; test floatList &amp;quot;[4,5,6]&amp;quot;;;
Success: [4.0; 5.0; 6.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Тестирование с не корректными строками показывает, что &lt;code&gt;floatList&lt;/code&gt; создает полезные сообщения об ошибках:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test floatList &amp;quot;[1.0,]&amp;quot;;;
Failure: Error in Ln: 1 Col: 6
[1.0,]
     ^
Expecting: floating-point number

&amp;gt; test floatList &amp;quot;[1.0,2.0&amp;quot;;;
Failure: Error in Ln: 1 Col: 9
[1.0,2.0
        ^
Note: The error occurred at the end of the input stream.
Expecting: &#39;,&#39; or &#39;]&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Глава 6. Обработка пробелов</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/06-handling-whitespace/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/06-handling-whitespace/</guid>
      <description>&lt;p&gt;FParsec обрабатывает пробелы (пробелы, табуляции, новые строки и т. д.) Так же, как и любой другой ввод, поэтому наш синтаксический анализатор &lt;code&gt;floatList&lt;/code&gt; еще не умеет работать с пробелами:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test floatBetweenBrackets &amp;quot;[1.0, 2.0]&amp;quot;;;
Failure: Error in Ln: 1 Col: 5
[1.0, 2.0]
    ^
Expecting: &#39;]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если мы хотим, чтобы синтаксический анализатор игнорировал пробелы, нам нужно сделать это явным образом.&lt;/p&gt;

&lt;p&gt;Во-первых, нам нужно определить, что мы хотим принять в качестве пробела. Для простоты мы просто используем встроенный синтаксическим анализатором &lt;code&gt;spaces&lt;/code&gt;, который пропускает любую (возможно, пустую) последовательность символов &lt;code&gt;&#39; &#39;&lt;/code&gt;, &lt;code&gt;&#39;\t&#39;&lt;/code&gt; , &lt;code&gt;&#39;\r&#39;&lt;/code&gt; или &lt;code&gt;&#39;\n&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let ws = spaces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Затем нам нужно добавить синтаксический анализатор &lt;code&gt;ws&lt;/code&gt; во все места, где мы хотим игнорировать пробелы. В общем случае удобно пропустить пробелы &lt;em&gt;после&lt;/em&gt; вхождения отдельного элемента, т.е. Пропускать конечные, а не ведущие пробелы, потому что это уменьшает необходимость в обратной трассировке (подробнее см. ниже). В результате мы добавляем &lt;code&gt;ws&lt;/code&gt; в два места, чтобы пропустить любые пробелы после скобок или цифр:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let str_ws s = pstring s .&amp;gt;&amp;gt; ws
let float_ws = pfloat .&amp;gt;&amp;gt; ws
let numberList = str_ws &amp;quot;[&amp;quot; &amp;gt;&amp;gt;. sepBy float_ws (str_ws &amp;quot;,&amp;quot;) .&amp;gt;&amp;gt; str_ws &amp;quot;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Простой тест показывает, что &lt;code&gt;numberList&lt;/code&gt; игнорирует пробелы:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test numberList @&amp;quot;[ 1 ,
                          2 ] &amp;quot;;;
Success: [1.0; 2.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если мы привнесем ошибку во второй строке, то увидим, что FParsec автоматически отслеживает текущее положение столбца и строки синтаксического анализа текста:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test numberList @&amp;quot;[ 1,
                         2; 3]&amp;quot;;;

Failure: Error in Ln: 2 Col: 27
                         2; 3]
                          ^
Expecting: &#39;,&#39; or &#39;]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Наш синтаксический анализатор &lt;code&gt;numberList&lt;/code&gt; прежнему не пропускает ведущие пробелы, потому что это необязательно, когда мы сопоставляем его с другими синтаксическими анализаторами, которые пропускают все конечные пробелы. Если бы мы хотели разобрать весь поток ввода только с числами с плавающей запятой, мы могли бы использовать следующий синтаксический анализатор:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let numberListFile = ws &amp;gt;&amp;gt;. numberList .&amp;gt;&amp;gt; eof
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Синтаксический анализатор конца файла &lt;code&gt;eof&lt;/code&gt; будет генерировать ошибку, если конец потока не был достигнут. Это полезно для обеспечения того, чтобы весь входной поток был потреблен. Без анализатора &lt;code&gt;eof&lt;/code&gt; следующий тест будет работать без ошибки:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test numberListFile &amp;quot; [1, 2, 3] [4]&amp;quot;;;
Failure: Error in Ln: 1 Col: 12
 [1, 2, 3] [4]
           ^
Expecting: end of input
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Глава 7. Синтаксический анализатор строковых данных</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/07-parsing-string-data/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/07-parsing-string-data/</guid>
      <description>&lt;p&gt;FParsec содержит различные встроенные синтаксические анализаторы для символов, строк, чисел и пробелов. В этой главе мы представим несколько синтаксических анализаторов символов и строк. Обзор всех доступных синтаксических анализаторов см. в &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/parser-overview.html&#34; target=&#34;_blank&#34;&gt;руководстве пользователя&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Вы уже видели несколько применений синтаксического анализатора &lt;code&gt;pstring&lt;/code&gt; (сокращенно &lt;code&gt;str&lt;/code&gt; ), который просто пропускает строку определенного формата на входе. Когда синтаксический анализатор &lt;code&gt;pstring&lt;/code&gt; успешно выполнился, он также возвращает пропущенную строку в качестве результата анализатора. Следующий пример демонстрирует это:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test (many (str &amp;quot;a&amp;quot; &amp;lt;|&amp;gt; str &amp;quot;b&amp;quot;)) &amp;quot;abba&amp;quot;;;
Success: [&amp;quot;a&amp;quot;; &amp;quot;b&amp;quot;; &amp;quot;b&amp;quot;; &amp;quot;a&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В этом примере мы так же использовали синтаксический анализатор &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; для объединения двух альтернативных анализаторов. Мы обсудим этот комбинатор более подробно ниже.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Мы говорим, что &lt;code&gt;pstring&lt;/code&gt; и &lt;code&gt;pstring &amp;quot;a&amp;quot;&lt;/code&gt; это «синтаксические анализаторы». Но строго говоря, &lt;code&gt;pstring&lt;/code&gt; - это функция, принимающая строку и возвращающая &lt;code&gt;Parser&lt;/code&gt;, но удобнее про нее говорить как (параметрический) синтаксический анализатор.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Когда вам не нужен результат синтаксического анализатора &lt;code&gt;pstring&lt;/code&gt;, вы можете в качестве альтернативы использовать синтаксический анализатор &lt;code&gt;skipString&lt;/code&gt;, который возвращает &lt;code&gt;unit&lt;/code&gt; значение &lt;code&gt;()&lt;/code&gt; вместо строки аргумента. В приведенном примере для производительности не имеет значения, используете ли вы &lt;code&gt;pstring&lt;/code&gt; или &lt;code&gt;skipString&lt;/code&gt;, так как возвращаемая строка является константой. Однако для большинства других встроенных синтаксических анализаторов и комбинаторов вы должны предпочесть варианты с префиксом в имени &lt;code&gt;skip&lt;/code&gt;, когда вам не нужны значения результата синтаксического анализатора, поскольку они, как правило, будут быстрее. Если вы посмотрите обзор &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/parser-overview.html&#34; target=&#34;_blank&#34;&gt;библиотеки FParsec&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;, вы увидите варианты &lt;code&gt;skip&lt;/code&gt; для многих встроенных синтаксических анализаторов и комбинаторов.&lt;/p&gt;

&lt;p&gt;Если вы хотите проанализировать строку без учета регистра, вы можете использовать &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.pstringCI&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pstringCI&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; и &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.skipStringCI&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;skipStringCI&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;. Например:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test (skipStringCI &amp;quot;&amp;lt;float&amp;gt;&amp;quot; &amp;gt;&amp;gt;. pfloat) &amp;quot;&amp;lt;FLOAT&amp;gt;1.0&amp;quot;;;
Success: 1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Часто нужно разбирать строковые переменные, чьи символы должны удовлетворять определенным критериям. Например, идентификаторы в языках программирования часто должны начинаться с буквы или подчеркивания, а затем необходимо продолжать буквы, цифры или символы подчеркивания. Чтобы проанализировать такой идентификатор, вы можете использовать следующий синтаксический анализатор:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let identifier =
    let isIdentifierFirstChar c = isLetter c || c = &#39;_&#39;
    let isIdentifierChar c = isLetter c || isDigit c || c = &#39;_&#39;

    many1Satisfy2L isIdentifierFirstChar isIdentifierChar &amp;quot;identifier&amp;quot;
    .&amp;gt;&amp;gt; ws // Пропускает завершающие пробелы
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь мы использовали синтаксический анализатор &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.many1Satisfy2L&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;many1Satisfy2L&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;, который является одним из нескольких примитивов для синтаксического анализа строк на основе предикатов символов (т.е. функций, которые принимают символ на входе и возвращают логическое значение). Он анализирует любую последовательность одного или нескольких символов (отсюда и &lt;code&gt;many1&lt;/code&gt; в имени), чей первый символ удовлетворяет первой предикатной функции, а остальные символы удовлетворяют второму предикату (отсюда &lt;code&gt;Satisfy2&lt;/code&gt;). Строковая метка, указанная в качестве третьего аргумента (следовательно, &lt;code&gt;L&lt;/code&gt;), используется в сообщении об ошибке для описания ожидаемого ввода.&lt;/p&gt;

&lt;p&gt;Следующие тесты показывают, как работает этот анализатор:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test identifier &amp;quot;_&amp;quot;;;
Success: &amp;quot;_&amp;quot;
&amp;gt; test identifier &amp;quot;_test1=&amp;quot;;;
Success: &amp;quot;_test1&amp;quot;
&amp;gt; test identifier &amp;quot;1&amp;quot;;;
Failure: Error in Ln: 1 Col: 1
1
^
Expecting: identifier
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Если вы хотите анализировать идентификаторы на основе синтаксиса &lt;a href=&#34;https://en.wikipedia.org/wiki/Unicode_character_property&#34; target=&#34;_blank&#34;&gt;Unicode XID&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;, рассмотрите возможность использования встроенного анализатора &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.identifier&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;identifier&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Многие строковые форматы достаточно сложны, поэтому вам нужно объединить несколько примитивов символьного синтаксического анализатора и строкового синтаксического анализатора. Например, рассмотрим следующий пример анализа строки в формате РНБН:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  normalChar:    any char except &#39;\&#39; and &#39;&amp;quot;&#39;

  escapedChar:   &#39;\\&#39; (&#39;\\&#39;|&#39;&amp;quot;&#39;|&#39;n&#39;|&#39;r&#39;|&#39;t&#39;)

  stringLiteral: &#39;&amp;quot;&#39; ( normalChar | escapedChar )* &#39;&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Прямой перевод этой грамматики в FParsec выглядит так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let stringLiteral =
  let normalChar = 
    let anyCharExcept c = c &amp;lt;&amp;gt; &#39;\\&#39; &amp;amp;&amp;amp; c &amp;lt;&amp;gt; &#39;&amp;quot;&#39;
    satisfy anyCharExcept
  let escapedChar = 
    let unescape c = 
      match c with
      | &#39;n&#39; -&amp;gt; &#39;\n&#39;
      | &#39;r&#39; -&amp;gt; &#39;\r&#39;
      | &#39;t&#39; -&amp;gt; &#39;\t&#39;
      | c   -&amp;gt; c
    pstring &amp;quot;\\&amp;quot; &amp;gt;&amp;gt;. (anyOf &amp;quot;\\nrt\&amp;quot;&amp;quot; |&amp;gt;&amp;gt; unescape)
  let quote = pstring &amp;quot;\&amp;quot;&amp;quot; 
  between quote quote ( manyChars (normalChar &amp;lt;|&amp;gt; escapedChar) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В этом примере появилось несколько новых функций библиотеки. Давайте рассмотрим их подробнее:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Функция &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.satisfy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;satisfy&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; разбирает любой символ, который удовлетворяет заданному в параметрах предикату.&lt;/li&gt;
&lt;li&gt;Функция &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.anyOf&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;anyOf&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; разбирает любой символ, содержащийся в строке аргумента.&lt;/li&gt;
&lt;li&gt;Комбинатор конвейера &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.:124::62::62:&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;|&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; применяет функцию с правой стороны (&lt;code&gt;unescape&lt;/code&gt;) к результату синтаксического анализатора с левой стороны (&lt;code&gt;anyOf &amp;quot;\\nrt\&amp;quot;&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Комбинатор выбора &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.:60::124::62:&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; применяет синтаксический анализатор с правой стороны, если синтаксический анализатор с левой стороны терпит неудачу, так что &lt;code&gt;normalChar &amp;lt;|&amp;gt; escapedChar&lt;/code&gt; может анализировать как обычные, так и экранированные символы. (Мы обсудим этот комбинатор более подробно через две главы далее).&lt;/li&gt;
&lt;li&gt;Функция &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.manyChars&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;manyChars&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; анализирует последовательность символов с заданным символьным синтаксическим анализатором и возвращает его как строку.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Давайте протестируем синтаксический анализатор &lt;code&gt;stringLiteral&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test stringLiteral &amp;quot;\&amp;quot;abc\&amp;quot;&amp;quot;;;
Success: &amp;quot;abc&amp;quot;
&amp;gt; test stringLiteral &amp;quot;\&amp;quot;abc\\\&amp;quot;def\\\\ghi&amp;quot;;;
Success: &amp;quot;abc&amp;quot;def\ghi&amp;quot;
&amp;gt; test stringLiteral &amp;quot;\&amp;quot;abc\\def\&amp;quot;&amp;quot;;;
Failure: Error in Ln: 1 Col: 6
&amp;quot;abc\def&amp;quot;
     ^
Expecting: any char in ‘\nrt&amp;quot;’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Вместо разбора строкового литерала посимвольно мы могли бы также разобрать его построчно:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let stringLiteral2 =
  let normalString = 
    let anyCharExcept c = c &amp;lt;&amp;gt; &#39;\\&#39; &amp;amp;&amp;amp; c &amp;lt;&amp;gt; &#39;&amp;quot;&#39;
    many1Satisfy anyCharExcept
  let escapedChar = 
    let unescape c = 
      match c with
      | &#39;n&#39; -&amp;gt; &#39;\n&#39;
      | &#39;r&#39; -&amp;gt; &#39;\r&#39;
      | &#39;t&#39; -&amp;gt; &#39;\t&#39;
      | c   -&amp;gt; c
    pstring &amp;quot;\\&amp;quot; &amp;gt;&amp;gt;. (anyOf &amp;quot;\\nrt\&amp;quot;&amp;quot; |&amp;gt;&amp;gt; unescape)
  let quote = pstring &amp;quot;\&amp;quot;&amp;quot; 
  between quote quote ( manyStrings (normalString &amp;lt;|&amp;gt; escapedChar) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь мы использовали комбинатор &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.manyStrings&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;manyStrings&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; , который анализирует последовательность строк с заданным синтаксическим анализатором строк и возвращает объединённую строку.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Мы должны настроить синтаксический анализатор &lt;code&gt;normalString&lt;/code&gt; что бы он требовал по крайней мере один символ, т.е. нужно использовать &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.many1Satisfy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;many1Satisfy&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; вместо &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.manySatisfy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;manySatisfy&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; . В противном случае &lt;code&gt;normalString&lt;/code&gt; успешно выполниться, даже если нет входных данных, &lt;code&gt;escapedChar&lt;/code&gt; никогда не вызовется вызываться, а &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.manyStrings&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;manyStrings&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; в конечном итоге вызовет исключение для предотвращения бесконечного цикла.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Синтаксический анализ строки с использованием оптимизированного синтаксического анализатора, такого как &lt;code&gt;many1Satisfy&lt;/code&gt;, обычно немного быстрее, чем синтаксический анализ его с помощью &lt;code&gt;manyChars&lt;/code&gt; и &lt;code&gt;satisfy&lt;/code&gt;. В этом случае мы можем оптимизировать наш синтаксический анализатор еще немного - как только мы поймем, что два нормальных фрагмента строк должны быть разделены хотя бы одним экранированным символом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let stringLiteral3 =
  let normalString = 
    let anyCharExcept c = c &amp;lt;&amp;gt; &#39;\\&#39; &amp;amp;&amp;amp; c &amp;lt;&amp;gt; &#39;&amp;quot;&#39;
    manySatisfy anyCharExcept
  let escapedChar = 
    let unescape c = 
      match c with
      | &#39;n&#39; -&amp;gt; &#39;\n&#39;
      | &#39;r&#39; -&amp;gt; &#39;\r&#39;
      | &#39;t&#39; -&amp;gt; &#39;\t&#39;
      | c   -&amp;gt; c
    pstring &amp;quot;\\&amp;quot; &amp;gt;&amp;gt;. (anyOf &amp;quot;\\nrt\&amp;quot;&amp;quot; |&amp;gt;&amp;gt; unescape)
  let quote = pstring &amp;quot;\&amp;quot;&amp;quot; 
  between quote quote ( stringsSepBy normalString escapedChar) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Синтаксический анализатор &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.stringsSepBy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;stringsSepBy&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; анализирует последовательность строк (первый аргумент), разделенных другими строками (второй аргумент). Он возвращает все разобранные строки, включая строки разделителя, в виде новой объединённой строки.&lt;/p&gt;

&lt;p&gt;Обратите внимание, что &lt;code&gt;stringLiteral3&lt;/code&gt; использует &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.many1Satisfy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;manySatisfy&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; вместо &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.many1Satisfy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;many1Satisfy&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; в своем определении &lt;code&gt;normalString&lt;/code&gt;, так что он может анализировать экранированные символы, которые не разделены обычными символами. Это приведет к бесконечному циклу, потому что &lt;code&gt;escapedChar&lt;/code&gt; не будет исполнено при отсутствии входных данных.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Глава 8. Использование последовательности синтаксических анализаторов</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/08-sequentially-applying-parsers/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/08-sequentially-applying-parsers/</guid>
      <description>&lt;p&gt;Всякий раз, когда вам нужно применять несколько синтаксических анализаторов в последовательности, а нужен только результат одного из них, подходящая комбинация &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.:62::62:..&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;.&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; и &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members...:62::62:&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; операторов поможет выполнить эту работу. Однако этих комбинаторов не хватит, если вам нужен результат более чем одного из задействованных синтаксических анализаторов. В этом случае вы можете использовать &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.pipe2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pipe2&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;, &amp;hellip;, &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.pipe5&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pipe5&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;, которые последовательно применяют несколько синтаксических анализаторов и передают все отдельные результаты функции, которая вычисляет итоговый результат.&lt;/p&gt;

&lt;p&gt;Например, с комбинатором &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.pipe2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pipe2&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val pipe2: Parser&amp;lt;&#39;a,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;b,&#39;u&amp;gt; -&amp;gt; (&#39;a -&amp;gt; b -&amp;gt; &#39;c) -&amp;gt; Parser&amp;lt;&#39;c,&#39;u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Вы можете построить синтаксический анализатор &lt;code&gt;pipe2 p1 p2 f&lt;/code&gt; который последовательно применяет два синтаксических анализатора &lt;code&gt;p1&lt;/code&gt; и &lt;code&gt;p2&lt;/code&gt;, а затем возвращает результат применения функции &lt;code&gt;f x1 x2&lt;/code&gt;, где &lt;code&gt;x1&lt;/code&gt; и &lt;code&gt;x2&lt;/code&gt; - результаты, возвращаемые &lt;code&gt;p1&lt;/code&gt; и &lt;code&gt;p2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;В следующем примере мы используем &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.pipe2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pipe2&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; для синтаксического анализа произведения из двух чисел:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let product = 
  pipe2 float_ws (str_ws &amp;quot;*&amp;quot; &amp;gt;&amp;gt;. float_ws) (fun x y -&amp;gt; x * y)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test product &amp;quot;3 * 5&amp;quot;;;
Success: 15.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pipe2-5&lt;/code&gt; особенно полезны для построения объектов Абстрактного синтаксического дерева (далее АСТ). В следующем примере мы используем &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.pipe3&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;pipe3&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; для анализа определения строковой константы в объекте &lt;code&gt;StringConstant&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type StringConstant = StringConstant of string * string

let stringConstant = 
  pipe3 identifier (str_ws &amp;quot;=&amp;quot;) stringLiteral (fun id _ str -&amp;gt; StringConstant(id, str))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test stringConstant &amp;quot;myString = \&amp;quot;stringValue\&amp;quot;&amp;quot;;;
Success: StringConstant (&amp;quot;myString&amp;quot;,&amp;quot;stringValue&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если вы просто хотите вернуть проанализированные значения в виде кортежа, вы можете использовать предопределенные функции &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.tuple2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tuple2&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;&amp;hellip;&lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.tuple2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tuple5&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;. Например, &lt;code&gt;tuple2 p1 p2&lt;/code&gt; эквивалентен  &lt;code&gt;pipe2 p1 p2 ( fun x1 x2 -&amp;gt; ( x1 , x2 ) )&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Синтаксический анализатор &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.tuple2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;tuple2&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; также доступен в виде комбинатора &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members...:62::62:..&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;.&amp;gt;&amp;gt;.&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;. Так что вы можете написать  &lt;code&gt;p1 .&amp;gt;&amp;gt;. p2&lt;/code&gt; вместо &lt;code&gt;tuple2 p1 p2&lt;/code&gt;. В следующем примере мы проанализируем пару разделенных запятыми чисел с этим оператором:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test (float_ws .&amp;gt;&amp;gt;. (str_ws &amp;quot;,&amp;quot; &amp;gt;&amp;gt;. float_ws)) &amp;quot;123, 456&amp;quot;;;
Success: (123.0, 456.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Надеемся, что вы уже интуитивно понимаете шаблон записи &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;em&gt;одна-или-две-точки&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Если вам нужен синтаксический анализатор &lt;code&gt;pipe&lt;/code&gt; или &lt;code&gt;tuple&lt;/code&gt; более чем c пятью аргументами, вы можете легко построить его с помощью существующих. Например, у вас есть идея: определить синтаксический анализатор &lt;code&gt;pipe7&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let pipe7 p1 p2 p3 p4 p5 p6 p7 f =
    pipe4 p1 p2 p3 (tuple4 p4 p5 p6 p7)
          (fun x1 x2 x3 (x4, x5, x6, x7) -&amp;gt; f x1 x2 x3 x4 x5 x6 x7)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Глава 9. Использование альтернативных синтаксических анализов</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/09-parsing-alternatives/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/09-parsing-alternatives/</guid>
      <description>&lt;p&gt;В главе 7 &amp;ldquo;&lt;a href=&#34;../07-parsing-string-data&#34;&gt;Синтаксический анализатор строковых данных&lt;/a&gt;&amp;rdquo; мы вкратце представили комбинатор выбора &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.:60::124::62:&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val (&amp;lt;|&amp;gt;): Parser&amp;lt;&#39;a,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;a,&#39;u&amp;gt; -&amp;gt; Parser&amp;lt;&#39;a,u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Этот комбинатор позволяет вам поддерживать несколько альтернативных вариантов.&lt;/p&gt;

&lt;p&gt;Например, в &lt;a href=&#34;../07-parsing-string-data&#34;&gt;главе 7&lt;/a&gt; мы использовали &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; для объединения синтаксического анализатора для неэкранированных символов и анализатора для экранированных символов в новый анализатор, который поддерживает оба варианта: &lt;code&gt;normalChar &amp;lt;|&amp;gt; escapedChar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Другим примером, показывающим, как работает &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; является следующий синтаксический анализатор для разбора строкового представления булевых значений:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let boolean = 
  (stringReturn &amp;quot;true&amp;quot;  true) &amp;lt;|&amp;gt;
  (stringReturn &amp;quot;false&amp;quot; false)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь мы использовали синтаксический анализатор &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/charparsers.html#members.stringReturn&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;stringReturn&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;, который берет в качестве первого аргумента строку, и, в случае успеха, возвращает значение, указанное в качестве второго аргумента.&lt;/p&gt;

&lt;p&gt;Протестируем синтаксический анализатор &lt;code&gt;boolean&lt;/code&gt; на примерах:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test boolean &amp;quot;false&amp;quot;;;
Success: false
&amp;gt; test boolean &amp;quot;true&amp;quot;;;
Success: true
&amp;gt; test boolean &amp;quot;tru&amp;quot;;;
Failure: Error in Ln: 1 Col: 1
tru
^
Expecting: &#39;false&#39; or &#39;true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Поведение комбинатора &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; имеет две важные характеристики:
* &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; Правая часть синтаксического анализатора выполняется, если синтаксический анализатор левой части завершился с не фатальной ошибкой и без изменения состояния. Комбинатор не реализует правило самого длинного совпадения.
* Однако, комбинатор пытается использовать правый синтаксический анализатор, если левый синтаксический анализатор при завершении вызывает &lt;em&gt;нет данных для обработки&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Следствием второго пункта является то, что следующий тест завершился неудачно, потому что синтаксический анализатор в левой части &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; получает пробелы перед сбоем:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test ((ws &amp;gt;&amp;gt;. str &amp;quot;a&amp;quot;) &amp;lt;|&amp;gt; (ws &amp;gt;&amp;gt;. str &amp;quot;b&amp;quot;)) &amp;quot; b&amp;quot;;;
Failure: Error in Ln: 1 Col: 2
 b
 ^
Expecting: &#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;К счастью, мы можем легко исправить этот синтаксический анализатор, выделив &lt;code&gt;ws&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test (ws &amp;gt;&amp;gt;. (str &amp;quot;a&amp;quot; &amp;lt;|&amp;gt; str &amp;quot;b&amp;quot;)) &amp;quot; b&amp;quot;;;
Success: &amp;quot;b&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если вам интересно, почему &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; ведет себя таким образом и как вы можете обрабатывать ситуации, в которых вам нужно чтобы  &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; пытался исполнять альтернативный синтаксический анализатор, даже если первый синтаксический анализатор вызвал ошибку после обработки входных данных смотрите главы &lt;a href=&#34;http://www.quanttec.com/fparsec/users-guide/parsing-alternatives.html&#34; target=&#34;_blank&#34;&gt;5.6 Parsing alternatives&lt;/a&gt; и &lt;a href=&#34;http://www.quanttec.com/fparsec/users-guide/looking-ahead-and-backtracking.html&#34; target=&#34;_blank&#34;&gt;5.7 Looking ahead and backtracking&lt;/a&gt; в руководстве пользователя.&lt;/p&gt;

&lt;p&gt;Если вы хотите использовать более двух альтернативных синтаксических анализаторов, вы можете комбинировать несколько операторов &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt;, например, в &lt;code&gt;p1 &amp;lt;|&amp;gt; p2 &amp;lt;|&amp;gt; p3 &amp;lt;|&amp;gt; ...&lt;/code&gt;, или вы можете использовать комбинатор &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/primitives.html#members.choice&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;choice&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;, который принимает последовательность синтаксических анализаторов в качестве аргумента, например &lt;code&gt;choice [ p1 ; p2 ; p3 ; ... ]&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Глава 10. Ограничение значений F#</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/10-fsharps-value-restriction/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/10-fsharps-value-restriction/</guid>
      <description>&lt;p&gt;Когда вы начинаете писать собственные синтаксические анализаторы с помощью библиотеки FParsec или пытаетесь скомпилировать некоторые отдельные фрагменты кода из учебника, вы столкнетесь с особенностями компилятора, которые часто вызывают некоторые затруднения среди новых пользователей F# и FParsec: ограничение значений. В этом разделе мы объясним ограничение значений и способ его обработки в ваших программах FParsec.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Если вы найдете содержимое главы слишком техническим на данный момент, просто перейдите к следующей главе и вернитесь позже, когда вы в первый раз увидите сообщение компилятора, в котором упоминается &lt;em&gt;value restriction&lt;/em&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Ограничение значений F# является причиной того, что следующий фрагмент кода не компилируется&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open FParsec
let p = pstring &amp;quot;test&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Но следующий фрагмент скомпилирован без проблем (Предполагаем, что вы ссылались на две библиотеки FParsec):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open FParsec
let p = pstring &amp;quot;test&amp;quot;
run p &amp;quot;input&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ошибка компилятора, сгенерированная для первого примера будет примерно следующая:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error FS0030: Value restriction.
The value &#39;p&#39; has been inferred to have generic type
    val p : Parser&amp;lt;string,&#39;_a&amp;gt;
Either make the arguments to &#39;p&#39; explicit or,
if you do not intend for it to be generic, add a type annotation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Когда вы работаете с библиотекой FParsec, вы рано или поздно увидите это или похожие сообщения об ошибке, в частности, если вы работаете в интерактивной консоли. К счастью для ошибок такого рода, как правило, легко найти обходной путь.&lt;/p&gt;

&lt;p&gt;Проблема с первым примером выше заключается в том, что компилятор F# выводит значение &lt;code&gt;p&lt;/code&gt; как имеющее неопределенное значение общего типа, хотя F# не допускает значение общего типа в этой ситуации. Функция &lt;code&gt;pstring&lt;/code&gt; возвращает значение типа &lt;code&gt;Parser&amp;lt;string, &#39;u&amp;gt;&lt;/code&gt;, где &lt;code&gt;&#39;u&lt;/code&gt; - параметр типа представляющий собой пользовательское состояние типа &lt;code&gt;CharStream&lt;/code&gt;. Так как в первом примере выше, нет значений содержащих этот параметр типа, компилятор указывает тип результата как &lt;code&gt;Parser&amp;lt;string, &#39;_a&amp;gt;&lt;/code&gt; для синтаксического анализатора &lt;code&gt;p&lt;/code&gt;, где &lt;code&gt;&#39;_a&lt;/code&gt; представляет не определенный параметр общего типа.&lt;/p&gt;

&lt;p&gt;Во втором примере эта проблема не возникает, поскольку использование &lt;code&gt;p&lt;/code&gt; в качестве первого аргумента функции &lt;code&gt;run&lt;/code&gt; определяет тип пользовательского состояния. Поскольку &lt;code&gt;run&lt;/code&gt; принимает только синтаксические анализаторы типа &lt;code&gt;Parser&amp;lt;&#39;t, unit&amp;gt;&lt;/code&gt;, компилятор выводит определенный тип &lt;code&gt;Parser&amp;lt;string, unit&amp;gt;&lt;/code&gt; для &lt;code&gt;p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;В примере ниже предлагается два способа обработки ограничения значений в программах FParsec:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Либо убедитесь, что тип значения синтаксического анализатора ограничен не обобщенным типом путем дальнейшего использования значения этого синтаксического анализатора &lt;em&gt;в одном блоке компиляции&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;Или предоставьте явную аннотацию типа, чтобы вручную ограничивать тип значения синтаксического анализатора (обычно для всего модуля синтаксического анализа достаточно нескольких аннотаций типа в ключевых точках).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Часто бывает удобно определить аббревиатуры типа следующего вида:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type UserState = unit // Конечно не обязательно должен быть unit типом
type Parser&amp;lt;&#39;t&amp;gt; = Parser&amp;lt;&#39;t, UserState&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;С такими аббревиатурами, типы аннотаций становятся такими же простыми, как&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let p : Parser&amp;lt;_&amp;gt; = pstring &amp;quot;test&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Конечно, ограничение значения типа синтаксического анализатора до определенного типа - это только решение, если вам действительно не нужен общий тип. Если вам нужен общий тип, вам придется применять другие методы, как это описано, например, в документации по языку &lt;a href=&#34;https://docs.microsoft.com/ru-ru/dotnet/fsharp/language-reference/generics/automatic-generalization&#34; target=&#34;_blank&#34;&gt;F#&lt;/a&gt; или в статье &lt;a href=&#34;http://blogs.msdn.com/b/mulambda/archive/2010/05/01/value-restriction-in-f.aspx&#34; target=&#34;_blank&#34;&gt;Finer Points of F# Value Restriction&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; в блоге Дмитрия Ломова. Однако значения &lt;code&gt;Parser&lt;/code&gt; FParsec (непараметрические функции синтаксического анализатора) обычно используются только в контексте конкретного использования синтаксического анализатора с фиксированным типом состояния пользователя. В этой ситуации ограничение типа действительно является подходящей мерой, чтобы избежать ошибок ограничения значения.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Глава 11. Синтаксический анализ JSON</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/11-parsing-json/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/11-parsing-json/</guid>
      <description>&lt;p&gt;Now that we have discussed the basics of FParsec we are well prepared to work through a real world parser example: a JSON parser.&lt;/p&gt;

&lt;p&gt;JSON (JavaScript Object Notation) is a text-based data interchange format with a simple and lightweight syntax. You can find descriptions of the syntax on &lt;a href=&#34;http://json.org&#34; target=&#34;_blank&#34;&gt;json.org&lt;/a&gt; and in &lt;a href=&#34;http://www.ietf.org/rfc/rfc4627.txt&#34; target=&#34;_blank&#34;&gt;RFC 4626&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In many applications one only has to deal with JSON files describing one particular kind of object. In such a context it sometimes can be appropriate to write a specialized parser just for that specific kind of JSON file. In this tutorial, however, we will follow a more general approach. We will implement a parser that can parse any general JSON file into an AST, i.e. an intermediate data structure describing the contents of the file. Applications can then conveniently query this data structure and extract the information they need. This is an approach comparable to that of XML parsers which build a data structure describing the document tree of an XML document. The great advantage of this approach is that the JSON parser itself becomes reusable and the document specific parsing logic can be expressed in the form of simple functions processing the AST of the JSON document.&lt;/p&gt;

&lt;p&gt;The natural way to implement an AST in F# is with the help of a discriminated union type. If you look at the &lt;a href=&#34;http://json.org&#34; target=&#34;_blank&#34;&gt;JSON specification&lt;/a&gt;, you can see that a JSON value can be a string, a number, a boolean, null, a comma-separated list of values in square brackets, or an object with a sequence of key-value pairs in curly brackets.&lt;/p&gt;

&lt;p&gt;In our parser we will use the following union type to represent JSON values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Json = JString of string
          | JNumber of float
          | JBool   of bool
          | JNull
          | JList   of Json list
          | JObject of Map&amp;lt;string, Json&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we&amp;rsquo;ve chosen the F# &lt;code&gt;list&lt;/code&gt; type to represent a sequence of values and the &lt;code&gt;Map&lt;/code&gt; type to represent a sequence of key-value pairs, because these types are particularly convenient to process in F#.[fn If you need to parse huge sequences and objects, it might be more appropriate to use an array and dictionary for JList and JObject respectively.] Note that the &lt;code&gt;Json&lt;/code&gt; type is recursive, since both &lt;code&gt;JList&lt;/code&gt; and &lt;code&gt;JObject&lt;/code&gt; values can themselves contain &lt;code&gt;Json&lt;/code&gt; values. Our parser will have to reflect this recursive structure.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;###Tip
If you&amp;rsquo;re new to FParsec and have a little time, it would be a good exercise to try to implement the JSON parser on your own (with the help of the reference documentation). This tutorial already covered almost everything you need and the JSON grammar is simple enough that this shouldn&amp;rsquo;t take too much time. Of course, you can always peek at the implementation below if you get stuck.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We start the actual parser implementation by covering the simple &lt;code&gt;null&lt;/code&gt; and boolean cases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let jnull = stringReturn &amp;quot;null&amp;quot; JNull
let jool =      (stringReturn &amp;quot;true&amp;quot;  (JBool true))
            &amp;lt;|&amp;gt; (stringReturn &amp;quot;false&amp;quot; (JBool false))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Handling the number case is just as simple, because the JSON number format is based on the typical floating-point number format used in many programming languages and hence can be parsed with FParsec&amp;rsquo;s built-in &lt;code&gt;pfloat&lt;/code&gt; parser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let jnumber = pfloat |&amp;gt;&amp;gt; JNumber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note that F# allows us to pass the object constructor &lt;code&gt;JNumber&lt;/code&gt; as a function argument.)&lt;/p&gt;

&lt;p&gt;If you compare the precise number format supported by &lt;code&gt;pfloat&lt;/code&gt; with that in the JSON spec, you&amp;rsquo;ll see that &lt;code&gt;pfloat&lt;/code&gt; supports a superset of the JSON format. In contrast to the JSON format the &lt;code&gt;pfloat&lt;/code&gt; parser also recognizes &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; values, accepts a leading plus sign, accepts leading zeros and even supports the hexadecimal float format of Java and C99. Depending on the context this behaviour can be considered a feature or a limitation of the parser. For most applications it probably doesn&amp;rsquo;t matter, and the JSON RFC clearly states that a JSON parser may support a superset of the JSON syntax. However, if you&amp;rsquo;d rather only support the exact JSON number format, you can implement such a float parser rather easily based on the configurable &lt;code&gt;numberLiteral&lt;/code&gt; parser (just have a look at how this is currently done in the &lt;code&gt;pfloat&lt;/code&gt; source).&lt;/p&gt;

&lt;p&gt;The JSON string format takes a little more effort to implement, but we&amp;rsquo;ve already parsed a similar format with the &lt;code&gt;stringLiteral&lt;/code&gt; parsers in &lt;a href=&#34;#Parsing string data&#34;&gt;Parsing string data&lt;/a&gt;, so we can just adapt one of those parsers for our purpose:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let stringLiteral =
    let escape =  anyOf &amp;quot;\&amp;quot;\\/bfnrt&amp;quot;
                  |&amp;gt;&amp;gt; function
                      | &#39;b&#39; -&amp;gt; &amp;quot;\b&amp;quot;
                      | &#39;f&#39; -&amp;gt; &amp;quot;\u000C&amp;quot;
                      | &#39;n&#39; -&amp;gt; &amp;quot;\n&amp;quot;
                      | &#39;r&#39; -&amp;gt; &amp;quot;\r&amp;quot;
                      | &#39;t&#39; -&amp;gt; &amp;quot;\t&amp;quot;
                      | c   -&amp;gt; string c // every other char is mapped to itself

    let unicodeEscape =
    	/// converts a hex char ([0-9a-fA-F]) to its integer number (0-15)
        let hex2int c = (int c &amp;amp;&amp;amp;&amp;amp; 15) + (int c &amp;gt;&amp;gt;&amp;gt; 6)*9

        str &amp;quot;u&amp;quot; &amp;gt;&amp;gt;. pipe4 hex hex hex hex (fun h3 h2 h1 h0 -&amp;gt;
            (hex2int h3)*4096 + (hex2int h2)*256 + (hex2int h1)*16 + hex2int h0
            |&amp;gt; char |&amp;gt; string
        )

    let escapedCharSnippet = str &amp;quot;\\&amp;quot; &amp;gt;&amp;gt;. (escape &amp;lt;|&amp;gt; unicodeEscape)
    let normalCharSnippet  = manySatisfy (fun c -&amp;gt; c &amp;lt;&amp;gt; &#39;&amp;quot;&#39; &amp;amp;&amp;amp; c &amp;lt;&amp;gt; &#39;\\&#39;)

    between (str &amp;quot;\&amp;quot;&amp;quot;) (str &amp;quot;\&amp;quot;&amp;quot;)
            (stringsSepBy normalCharSnippet escapedCharSnippet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;stringLiteral&lt;/code&gt; parses string literals as a sequence of normal char snippets separated by escaped char snippets. A normal char snippet is any sequence of chars that does not contain the chars &lt;code&gt;&#39;&amp;quot;&#39;&lt;/code&gt; and &lt;code&gt;&#39;\\&#39;&lt;/code&gt;. An escaped char snippet consists of a backslash followed by any of the chars &lt;code&gt;&#39;\\&#39;&lt;/code&gt;, &lt;code&gt;&#39;\&amp;quot;&#39;&lt;/code&gt;, &lt;code&gt;&#39;/&#39;&lt;/code&gt;, &lt;code&gt;&#39;b&#39;&lt;/code&gt;, &lt;code&gt;&#39;f&#39;&lt;/code&gt;, &lt;code&gt;&#39;n&#39;&lt;/code&gt;, &lt;code&gt;&#39;r&#39;&lt;/code&gt;, &lt;code&gt;&#39;t&#39;&lt;/code&gt;, or an Unicode escape. An Unicode escape consists of an &lt;code&gt;&#39;u&#39;&lt;/code&gt; followed by four hex chars representing an UTF-16 code point.&lt;/p&gt;

&lt;p&gt;[#createParserForwardedToRef-example]
The grammar rules for JSON lists and objects are recursive, because any list or object can contain itself any kind of JSON value. Hence, in order to write parsers for the list and object grammar rules, we need a way to refer to the parser for any kind of JSON value, even though we haven&amp;rsquo;t yet constructed this parser. Like it is so often in computing, we can solve this problem by introducing an extra indirection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let jvalue, jvalueRef = createParserForwardedToRef&amp;lt;Json, unit&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you might have guessed from the name, &lt;code&gt;createParserForwardedToRef&lt;/code&gt; creates a parser (&lt;code&gt;jvalue&lt;/code&gt;) that forwards all invocations to the parser in a reference cell (&lt;code&gt;jvalueRef&lt;/code&gt;). Initially, the reference cell holds a dummy parser, but since the reference cell is mutable, we can later replace the dummy parser with the actual value parser, once we have finished constructing it.&lt;/p&gt;

&lt;p&gt;The JSON RFC sensibly only permits spaces, (horizontal) tabs, line feeds and carriage returns as whitespace characters, which allows us to use the built-in &lt;code&gt;spaces&lt;/code&gt; parser for parsing whitespace:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let ws = spaces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both JSON lists and objects are syntactically represented as a comma-separated lists of &amp;ldquo;elements&amp;rdquo; between brackets, where whitespace is allowed before and after any bracket, comma and list element. We can conveniently parse such lists with the following helper function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let listBetweenStrings sOpen sClose pElement f =
    between (str sOpen) (str sClose)
            (ws &amp;gt;&amp;gt;. sepBy (pElement .&amp;gt;&amp;gt; ws) (str &amp;quot;,&amp;quot; &amp;gt;&amp;gt;. ws) |&amp;gt;&amp;gt; f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function takes four arguments: an opening string, a closing string, an element parser and a function that is applied to the parsed list of elements.&lt;/p&gt;

&lt;p&gt;With the help of this function we can define the parser for a JSON list as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let jlist   = listBetweenStrings &amp;quot;[&amp;quot; &amp;quot;]&amp;quot; jvalue JList
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON objects are lists of key-value pairs, so we need a parser for a key-value pair:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let keyValue = stringLiteral .&amp;gt;&amp;gt;. (ws &amp;gt;&amp;gt;. str &amp;quot;:&amp;quot; &amp;gt;&amp;gt;. ws &amp;gt;&amp;gt;. jvalue)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Remember, the points on both sides of &lt;code&gt;.&amp;gt;&amp;gt;.&lt;/code&gt; indicate that the results of the two parsers on both sides are returned as a tuple.)&lt;/p&gt;

&lt;p&gt;By passing the &lt;code&gt;keyValue&lt;/code&gt; parser to &lt;code&gt;listBetweenStrings&lt;/code&gt; we obtain a parser for JSON objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let jobject = listBetweenStrings &amp;quot;{&amp;quot; &amp;quot;}&amp;quot; keyValue (Map.ofList &amp;gt;&amp;gt; JObject)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[#json-value-parser]
Having defined parsers for all the possible kind of JSON values, we can combine the different cases with a &lt;code&gt;choice&lt;/code&gt; parser to obtain the finished parser for JSON values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do jvalueRef := choice [jobject
                        jlist
                        jstring
                        jnumber
                        jtrue
                        jfalse
                        jnull]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;jvalue&lt;/code&gt; parser doesn&amp;rsquo;t accept leading or trailing whitespace, so we need to define our parser for complete JSON documents as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let json = ws &amp;gt;&amp;gt;. jvalue .&amp;gt;&amp;gt; ws .&amp;gt;&amp;gt; eof
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This parser will try to consume a complete JSON input stream and, if successful, will return a &lt;code&gt;Json&lt;/code&gt; AST of the input as the parser result&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it, we&amp;rsquo;re finished with our JSON parser. If you want to try this parser out on some sample input, please take a look at the JSON project in the &lt;strong&gt;Samples&lt;/strong&gt; folder.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Глава 12. Куда дальше?</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/12-what-now/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/12-what-now/</guid>
      <description>&lt;p&gt;If this tutorial has whet your appetite for a more in-depth introduction to FParsec, just head over to the &lt;a href=&#34;http://www.quanttec.com/fparsec/users-guide/&#34; target=&#34;_blank&#34;&gt;user&amp;rsquo;s guide&lt;/a&gt;. If you can&amp;rsquo;t wait to write your own parser, then bookmark the &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/parser-overview.html&#34; target=&#34;_blank&#34;&gt;parser overview&lt;/a&gt; page, maybe take a short look at the example parsers in the &lt;strong&gt;Samples&lt;/strong&gt; folder and just start hacking. You can always consult the user&amp;rsquo;s guide at a later point should you get stuck somewhere.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Обзор всех функций DAX</title>
      <link>http://DmitriyVlasov.ru/post/dax-functions/</link>
      <pubDate>Tue, 11 Jul 2017 13:11:31 +0300</pubDate>
      
      <guid>http://DmitriyVlasov.ru/post/dax-functions/</guid>
      <description>

&lt;p&gt;&lt;a name=&#34;TOC&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;предисловие&#34;&gt;Предисловие&lt;/h1&gt;

&lt;p&gt;Приводится обзор всех существующих функций DAX. Основное назначение статьи максимально возможно упростить обзор и изучение, навигацию и ориентирование по всем существующим функциям DAX в одной статье. По мере появления в статью будут добавляться новые DAX функции.&lt;/p&gt;

&lt;h1 id=&#34;содержание&#34;&gt;Содержание&lt;/h1&gt;

&lt;h2 id=&#34;краткое-содержание&#34;&gt;Краткое содержание&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#logicFunction&#34;&gt;Логические функции&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#textFunction&#34;&gt;Текстовые функции&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mathFunction&#34;&gt;Математические и тригонометрические функции&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dateTimeFunction&#34;&gt;Функции даты и времени&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dateTimeLogicFunction&#34;&gt;Интеллектуальные операции со временем&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#informationFunction&#34;&gt;Информационные функции&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filterFunction&#34;&gt;Функции фильтрации&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#agregateAndstatFunction&#34;&gt;Агрегатные и статистические функции&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#patentChildFunction&#34;&gt;Функции над иерархическими данными&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#otherFunction&#34;&gt;Прочие функции&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;подробное-содержание&#34;&gt;Подробное содержание&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#logicFunction&#34;&gt;Логические функции&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#textFunction&#34;&gt;Текстовые функции&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#baseTextFunction&#34;&gt;Базовые операции со стоками&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#formatTextFunction&#34;&gt;Форматирование и преобразование типов&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#searchAndReplaceTextFunction&#34;&gt;Поиск и замена&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mathFunction&#34;&gt;Математические и тригонометрические функции&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#baseMathFunction&#34;&gt;Базовые операции с числами&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#roundMathFunction&#34;&gt;Округление&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#randomMathFunction&#34;&gt;Операции со случайными числами&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#trigMathFunction&#34;&gt;Тригонометрические функции и константы&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dateTimeFunction&#34;&gt;Функции даты и времени&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#baseDateTimeFunction&#34;&gt;Базовые операции с датой и временем&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#constructorDateTimeFunction&#34;&gt;Конструкторы даты и времени&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extendDateTimeFunction&#34;&gt;Расширенные операции с датой&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dateTimeLogicFunction&#34;&gt;Интеллектуальные операции со временем&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#returnColDateTimeLogicFunction&#34;&gt;Функции возвращающие столбец дат&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#returnColPart1DateTimeLogicFunction&#34;&gt;Операции с периодами&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#returnColPart2DateTimeLogicFunction&#34;&gt;Операции днем, месяцем, кварталом и годом&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#returnCellPart1DateTimeLogicFunction&#34;&gt;Функции возвращающие ячейку с датой&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#returnCellPart2DateTimeLogicFunction&#34;&gt;Функции возвращающие ячейку со значением&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#returnValueDateTimeLogicFunction&#34;&gt;Функции возвращающие скалярное значение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#informationFunction&#34;&gt;Информационные функции&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#filterFunction&#34;&gt;Функции фильтрации&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#agregateAndstatFunction&#34;&gt;Агрегатные и статистические функции&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#agregareTableFunction&#34;&gt;Агрегатные функции над таблицами&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#agregareColumnFunction&#34;&gt;Агрегатные функции над столбцами и выражениями&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#statFunction&#34;&gt;Статистические функции над столбцами и выражениями&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#notesAgregateAndstatFunction&#34;&gt;Замечания к агрегатным и статистическим функциям&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#patentChildFunction&#34;&gt;Функции над иерархическими данными&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#otherFunction&#34;&gt;Прочие функции&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;logicFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;логические-функции&#34;&gt;Логические функции&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee635034&#34; target=&#34;_blank&#34;&gt;TRUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает логическое значение &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634894&#34; target=&#34;_blank&#34;&gt;FALSE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает логическое значение &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634379&#34; target=&#34;_blank&#34;&gt;AND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет значения аргументов и возвращает значение &lt;code&gt;true&lt;/code&gt;, если оба аргумента имеют значение &lt;code&gt;true&lt;/code&gt;. В противном случае возвращает значение &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634951&#34; target=&#34;_blank&#34;&gt;OR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет, является ли один из аргументов &lt;code&gt;true&lt;/code&gt;, и если да, то возвращает значение &lt;code&gt;true&lt;/code&gt;. Функция возвращает значение &lt;code&gt;false&lt;/code&gt;, если оба аргумента имеют значение &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634884&#34; target=&#34;_blank&#34;&gt;NOT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Изменяет значение &lt;code&gt;false&lt;/code&gt; на &lt;code&gt;true&lt;/code&gt;, а &lt;code&gt;true&lt;/code&gt; на &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634824&#34; target=&#34;_blank&#34;&gt;IF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет выполнение условия, указанного в первом аргументе. Возвращает одно значение, если условие равно &lt;code&gt;true&lt;/code&gt;, и другое значение, если условие равно &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634765&#34; target=&#34;_blank&#34;&gt;IFERROR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Вычисляет выражение и возвращает указанное значение, если выражение ошибочно. В противном случае возвращает значение выражения.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492166&#34; target=&#34;_blank&#34;&gt;SWITCH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Вычисляет выражение на основе списка значений и возвращает одно из нескольких возможных результирующих выражений.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;textFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;текстовые-функции&#34;&gt;Текстовые функции&lt;/h1&gt;

&lt;p&gt;Текстовые функции, основаны на библиотеке строковых функций в Excel. C помощью этих функций можно вернуть часть строки, искать текст в строке или объединить строковые значения, а так же для управления форматами дат, времени и чисел.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;baseTextFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;базовые-операции-со-стоками&#34;&gt;Базовые операции со стоками&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634811&#34; target=&#34;_blank&#34;&gt;CONCATENATE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Соединяет две текстовые строки в одну текстовую строку (Чаще удобнее использовать оператор &lt;code&gt;&amp;amp;&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634898&#34; target=&#34;_blank&#34;&gt;REPT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Повторяет текст заданное количество раз.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634781&#34; target=&#34;_blank&#34;&gt;LEFT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает указанное количество символов с начала текстовой строки.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634358&#34; target=&#34;_blank&#34;&gt;RIGHT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Функция RIGHT возвращает последний символ или последние символы текстовой строки, в зависимости от указанного количества символов.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634558&#34; target=&#34;_blank&#34;&gt;TRIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Удаляет все пробелы из текста, за исключением единичных пробелов между словами.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634251&#34; target=&#34;_blank&#34;&gt;LOWER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Преобразует все буквы в текстовой строке в нижний регистр.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634377&#34; target=&#34;_blank&#34;&gt;UPPER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Преобразует все буквы в текстовой строке в верхний регистр.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;formatTextFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;форматирование-и-преобразование-типов&#34;&gt;Форматирование и преобразование типов&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634924&#34; target=&#34;_blank&#34;&gt;FORMAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Преобразует значение в текст в указанном числовом формате. (см. также предопределенные форматы &lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634561&#34; target=&#34;_blank&#34;&gt;чисел&lt;/a&gt; и &lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634813&#34; target=&#34;_blank&#34;&gt;даты и времени&lt;/a&gt;. Пользовательские форматы &lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634206&#34; target=&#34;_blank&#34;&gt;чисел&lt;/a&gt; и &lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634398&#34; target=&#34;_blank&#34;&gt;даты и времени&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634924&#34; target=&#34;_blank&#34;&gt;FIXED&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Преобразует значение в текст в указанном числовом формате.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634584&#34; target=&#34;_blank&#34;&gt;VALUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Преобразует текстовую строку, представляющую число, в число.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492191&#34; target=&#34;_blank&#34;&gt;CURRENCY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Вычисляет аргумент и возвращает результат как тип данных currency.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;searchAndReplaceTextFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;поиск-и-замена&#34;&gt;Поиск и замена&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;UNICHAR&lt;/td&gt;
&lt;td&gt;Возвращает символ Юникод по его числовому значению. Работает аналогично функции Excel &lt;a href=&#34;https://goo.gl/33djp8&#34; target=&#34;_blank&#34;&gt;ЮНИСИМВ&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634917&#34; target=&#34;_blank&#34;&gt;LEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает число символов в текстовой строке.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634235&#34; target=&#34;_blank&#34;&gt;SEARCH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает номер позиции, начиная с которой обнаружена подстрока. Поиск идет слева на право без учета регистра и с учетом диакритических знаков.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634882&#34; target=&#34;_blank&#34;&gt;FIND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает начальный номер позиции, начиная с которой обнаружена подстрока. Поиск идет с учетом регистра.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634548&#34; target=&#34;_blank&#34;&gt;MID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает строку символов из середины текстовой строки с учетом начальной позиции и длины.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634374&#34; target=&#34;_blank&#34;&gt;REPLACE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Заменяет часть текстовой строки другой текстовой строкой на основе указанного числа символов.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634233&#34; target=&#34;_blank&#34;&gt;SUBSTITUTE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Заменяет существующий текст новым в текстовой строке.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634408&#34; target=&#34;_blank&#34;&gt;EXACT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Сравнивает две текстовые строки и возвращает &lt;code&gt;true&lt;/code&gt;, если они полностью одинаковые, и &lt;code&gt;false&lt;/code&gt; в противном случае. Функция учитывает регистр, но не учитывает отличия форматирования. Можно использовать функцию, чтобы проверить входящий в документ текст.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;mathFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;математические-и-тригонометрические-функции&#34;&gt;Математические и тригонометрические функции&lt;/h1&gt;

&lt;p&gt;Математические функции в DAX похожи на математические и тригонометрические функции Excel. Однако имеются некоторые отличия в типах числовых данных.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;baseMathFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;базовые-операции-с-числами&#34;&gt;Базовые операции с числами&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634559&#34; target=&#34;_blank&#34;&gt;SQRT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает квадратный корень числа.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634921&#34; target=&#34;_blank&#34;&gt;POWER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает результат возведения числа в степень.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634249&#34; target=&#34;_blank&#34;&gt;SIGN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Определяет знак числа, результата вычисления или значения в столбце. Функция возвращает значение 1, если число положительное, значение 0 (ноль), если число равно нулю, и значение -1, если число отрицательное.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634382&#34; target=&#34;_blank&#34;&gt;QUOTIENT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Выполняет деление и возвращает только целочисленную часть результата. Эта функция используется, если не нужно учитывать остаток от деления.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;roundMathFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;округление&#34;&gt;Округление&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634566&#34; target=&#34;_blank&#34;&gt;ABS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает абсолютное значение числа.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634373&#34; target=&#34;_blank&#34;&gt;INT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Округляет число в меньшую сторону до ближайшего целого.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634402&#34; target=&#34;_blank&#34;&gt;ROUND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Округляет число до указанного количества разрядов.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634963&#34; target=&#34;_blank&#34;&gt;ROUNDDOWN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Округляет число вниз, к нулю.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634948&#34; target=&#34;_blank&#34;&gt;ROUNDUP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Округляет число в большую сторону, от 0 (нуля).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634815&#34; target=&#34;_blank&#34;&gt;FLOOR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Округляет число в меньшую сторону (к нулю) до ближайшего числа, кратного заданной значимости.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634541&#34; target=&#34;_blank&#34;&gt;CEILING&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Округляет число в большую сторону до ближайшего целого или до ближайшего числа, кратного заданной значимости.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg413419&#34; target=&#34;_blank&#34;&gt;ISO.CEILING&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Округляет число в большую сторону до ближайшего целого или до ближайшего числа, кратного заданной значимости.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634553&#34; target=&#34;_blank&#34;&gt;MROUND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает число, округленное до кратного заданной значимости.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634907&#34; target=&#34;_blank&#34;&gt;TRUNC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Усекает число до целого, удаляя дробную часть.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;randomMathFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;операции-со-случайными-числами&#34;&gt;Операции со случайными числами&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634783&#34; target=&#34;_blank&#34;&gt;RAND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает случайное число, большее или равное 0 и меньшее 1, с равномерным распределением. Возвращаемое число изменяется каждый раз при пересчете ячейки, содержащей данную функцию.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634569&#34; target=&#34;_blank&#34;&gt;RANDBETWEEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает случайное число, расположенное в интервале между двумя заданными числами.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;trigMathFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;тригонометрические-функции-и-константы&#34;&gt;Тригонометрические функции и константы&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634817&#34; target=&#34;_blank&#34;&gt;PI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает число $Pi$ с точностью до 15 знака.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634774&#34; target=&#34;_blank&#34;&gt;LOG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает логарифм числа по указанному основанию.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634578&#34; target=&#34;_blank&#34;&gt;LOG10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает логарифм числа по основанию 10.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634772&#34; target=&#34;_blank&#34;&gt;LN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает натуральный логарифм числа. Натуральные логарифмы вычисляются по основанию $e$.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634208&#34; target=&#34;_blank&#34;&gt;EXP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значение выражения $e^n$, где $n$ - заданное в параметрах число.  Функция &lt;code&gt;EXP&lt;/code&gt; обратна функции &lt;code&gt;LN&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634540&#34; target=&#34;_blank&#34;&gt;FACT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает факториал числа.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;dateTimeFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;функции-даты-и-времени&#34;&gt;Функции даты и времени&lt;/h1&gt;

&lt;p&gt;Многие функции даты и времени в DAX схожи с функциями даты и времени Excel. Однако в функциях DAX используется тип данных &lt;code&gt;datetime&lt;/code&gt; Microsoft SQL Server.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;baseDateTimeFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;базовые-операции-с-датой-и-временем&#34;&gt;Базовые операции с датой и временем&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634567&#34; target=&#34;_blank&#34;&gt;YEAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает для заданной даты год в виде четырехзначного числа от 1900 до 9999.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634914&#34; target=&#34;_blank&#34;&gt;MONTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает месяц в виде числа от 1 до 12.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634390&#34; target=&#34;_blank&#34;&gt;DAY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает день месяца в виде числа от 1 до 31.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634800&#34; target=&#34;_blank&#34;&gt;HOUR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значение часа в виде числа от 0 до 23.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634776&#34; target=&#34;_blank&#34;&gt;MINUTE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает число минут от 0 до 59 по заданному значению даты и времени.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634889&#34; target=&#34;_blank&#34;&gt;SECOND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает для заданного значения времени число секунд в виде числа от 0 до 59.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634550&#34; target=&#34;_blank&#34;&gt;WEEKDAY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает число от 1 до 7, определяющее день недели для даты. По умолчанию дни недели считаются от воскресенья (1) до субботы (7).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634572&#34; target=&#34;_blank&#34;&gt;WEEKNUM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает номер недели для заданных даты и года в соответствии со значением тип возврата. Номер недели указывает числовую позицию недели относительно начала года.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;constructorDateTimeFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;конструкторы-даты-и-времени&#34;&gt;Конструкторы даты и времени&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634927&#34; target=&#34;_blank&#34;&gt;DATE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Преобразует год, месяц, день, заданный в виде чисел в дату формате &lt;code&gt;datetime&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634564&#34; target=&#34;_blank&#34;&gt;TIME&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Преобразует часы, минуты и секунды, заданные в виде чисел, во время в формате &lt;code&gt;datetime&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634543&#34; target=&#34;_blank&#34;&gt;DATEVALUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Преобразует дату из текстового формата в дату в формате &lt;code&gt;datetime&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee635036&#34; target=&#34;_blank&#34;&gt;TIMEVALUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Преобразует время из текстового формата во время в формате &lt;code&gt;datetime&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634554&#34; target=&#34;_blank&#34;&gt;TODAY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает текущую дату без времени.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634891&#34; target=&#34;_blank&#34;&gt;NOW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает текущую дату и время.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;extendDateTimeFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;расширенные-операции-с-датой&#34;&gt;Расширенные операции с датой&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634405&#34; target=&#34;_blank&#34;&gt;YEARFRAC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Вычисляет долю года, представленную числом целых дней между двумя датами. Функция позволяет определить долю преимуществ или обязательств за целый год, приходящуюся на указанный срок.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634544&#34; target=&#34;_blank&#34;&gt;EDATE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает дату, отстоящую от заданной даты на указанное число месяцев (до или после). С помощью функции вычисляются сроки обязательств и платежей, приходящиеся на тот же день месяца, что и начало расчетного периода.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634394&#34; target=&#34;_blank&#34;&gt;EOMONTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает дату окончания месяца (до или после указанного числа месяцев). С помощью функции вычисляются сроки обязательств и платежей, приходящиеся на конец месяца.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;dateTimeLogicFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;интеллектуальные-операции-со-временем&#34;&gt;Интеллектуальные операции со временем&lt;/h1&gt;

&lt;p&gt;Интеллектуальные операции со временем, поддерживают методы анализа бизнес-аналитики и позволяют работать с данными с использованием временных периодов, таких как дни, месяцы, кварталы и годы.&lt;/p&gt;

&lt;p&gt;Эти функции позволяют выполнять вычисления с использованием встроенных наборов знаний о календарях и датах.&lt;/p&gt;

&lt;p&gt;Используя диапазоны времени и дат вместе со статистическими выражениями можно создавать осмысленные сравнения по сравнимым периодам времени для продаж, количеству товара и так далее.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;returnColDateTimeLogicFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;функции-возвращающие-столбец-дат&#34;&gt;Функции возвращающие столбец дат&lt;/h2&gt;

&lt;p&gt;Столбец дат это таблица содержащую один столбец со значениями даты.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;returnColPart1DateTimeLogicFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;операции-с-периодами&#34;&gt;Операции с периодами&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634905&#34; target=&#34;_blank&#34;&gt;DATEADD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Столбец дат, сдвинутых в будущее или в прошлое от дат в текущем контексте на указанное количество интервалов.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634557&#34; target=&#34;_blank&#34;&gt;DATESBETWEEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Столбец дат, за период с начальной до конечной даты.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634539&#34; target=&#34;_blank&#34;&gt;DATESINPERIOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Столбец дат, который начинается с начальной даты и продолжается определенное количество интервалов.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634873&#34; target=&#34;_blank&#34;&gt;PARALLELPERIOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Столбец дат, со сдвинутыми на несколько интервалов вперед или назад датами, от дат из столбца параметров в текущем контексте.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634972&#34; target=&#34;_blank&#34;&gt;SAMEPERIODLASTYEAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Столбец дат, со сдвинутыми на один год назад от дат, из столбца параметров в текущем контексте.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;returnColPart2DateTimeLogicFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;операции-днем-месяцем-кварталом-и-годом&#34;&gt;Операции днем, месяцем, кварталом и годом&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Тип&lt;/th&gt;
&lt;th&gt;День&lt;/th&gt;
&lt;th&gt;Месяц&lt;/th&gt;
&lt;th&gt;Квартал&lt;/th&gt;
&lt;th&gt;Год&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Текущий&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634359&#34; target=&#34;_blank&#34;&gt;DATESMTD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634901&#34; target=&#34;_blank&#34;&gt;DATESQTD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634221&#34; target=&#34;_blank&#34;&gt;DATESYTD&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Предыдущий&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634803&#34; target=&#34;_blank&#34;&gt;PREVIOUSDAY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634758&#34; target=&#34;_blank&#34;&gt;PREVIOUSMONTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634385&#34; target=&#34;_blank&#34;&gt;PREVIOUSQUARTER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634770&#34; target=&#34;_blank&#34;&gt;PREVIOUSYEAR&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Следующий&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634542&#34; target=&#34;_blank&#34;&gt;NEXTDAY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634392&#34; target=&#34;_blank&#34;&gt;NEXTMONTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634878&#34; target=&#34;_blank&#34;&gt;NEXTQUARTER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634212&#34; target=&#34;_blank&#34;&gt;NEXTYEAR&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;returnCellPart1DateTimeLogicFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;функции-возвращающие-ячейку-с-датой&#34;&gt;Функции возвращающие ячейку с датой&lt;/h2&gt;

&lt;p&gt;Ячейка это таблица с одним столбцом и одной строкой.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Тип&lt;/th&gt;
&lt;th&gt;День&lt;/th&gt;
&lt;th&gt;Месяц&lt;/th&gt;
&lt;th&gt;Квартал&lt;/th&gt;
&lt;th&gt;Год&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Первый&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634806&#34; target=&#34;_blank&#34;&gt;FIRSTDATE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634954&#34; target=&#34;_blank&#34;&gt;STARTOFMONTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634935&#34; target=&#34;_blank&#34;&gt;STARTOFQUARTER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634797&#34; target=&#34;_blank&#34;&gt;STARTOFYEAR&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Последний&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634380&#34; target=&#34;_blank&#34;&gt;LASTDATE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634239&#34; target=&#34;_blank&#34;&gt;ENDOFMONTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634243&#34; target=&#34;_blank&#34;&gt;ENDOFQUARTER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634245&#34; target=&#34;_blank&#34;&gt;ENDOFYEAR&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;returnCellPart2DateTimeLogicFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;функции-возвращающие-ячейку-со-значением&#34;&gt;Функции возвращающие ячейку со значением&lt;/h2&gt;

&lt;p&gt;Ячейка это таблица с одним столбцом и одной строкой.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634210&#34; target=&#34;_blank&#34;&gt;FIRSTNONBLANK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает первое значение в столбце column (с фильтрацией по текущему контексту), где выражение не является пустым.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634247&#34; target=&#34;_blank&#34;&gt;LASTNONBLANK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает последнее значение в столбце column (с фильтрацией по текущему контексту), где выражение не является пустым.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;returnValueDateTimeLogicFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;функции-возвращающие-скалярное-значение&#34;&gt;Функции возвращающие скалярное значение&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Тип&lt;/th&gt;
&lt;th&gt;Месяц&lt;/th&gt;
&lt;th&gt;Квартал&lt;/th&gt;
&lt;th&gt;Год&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Сальдо на начало&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634224&#34; target=&#34;_blank&#34;&gt;OPENINGBALANCEMONTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634931&#34; target=&#34;_blank&#34;&gt;OPENINGBALANCEQUARTER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634886&#34; target=&#34;_blank&#34;&gt;OPENINGBALANCEYEAR&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Оборот&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634560&#34; target=&#34;_blank&#34;&gt;TOTALMTD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634579&#34; target=&#34;_blank&#34;&gt;TOTALQTD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634400&#34; target=&#34;_blank&#34;&gt;TOTALYTD&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Сальдо на конец&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634215&#34; target=&#34;_blank&#34;&gt;CLOSINGBALANCEMONTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634876&#34; target=&#34;_blank&#34;&gt;CLOSINGBALANCEQUARTER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634562&#34; target=&#34;_blank&#34;&gt;CLOSINGBALANCEYEAR&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;informationFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;информационные-функции&#34;&gt;Информационные функции&lt;/h1&gt;

&lt;p&gt;Информационная функция проверяет ячейку или строку, указанные в качестве аргумента, и сообщает, соответствует ли значение ожидаемому типу. Например, функция &lt;code&gt;ISERROR&lt;/code&gt; возвращает значение &lt;code&gt;true&lt;/code&gt;, если упоминаемое значение содержит ошибку.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634204&#34; target=&#34;_blank&#34;&gt;ISBLANK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет, пустое ли значение, и возвращает значение &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634580&#34; target=&#34;_blank&#34;&gt;ISLOGICAL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет, является ли значение ошибкой, и возвращает &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634370&#34; target=&#34;_blank&#34;&gt;ISTEXT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет, является ли значение текстом, и возвращает &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634563&#34; target=&#34;_blank&#34;&gt;ISNONTEXT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет, не является ли значение текстом (пустые ячейки не являются текстом), и возвращает &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634911&#34; target=&#34;_blank&#34;&gt;ISNUMBER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет, является ли значение числом, и возвращает &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492163&#34; target=&#34;_blank&#34;&gt;ISFILTERED&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значение &lt;code&gt;true&lt;/code&gt;, если columnName фильтруется напрямую. Если для столбца не задан фильтр или если фильтрация происходит потому, что выполняется фильтрация другого столбца в той же или в связанной таблице, функция возвращает значение &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492197&#34; target=&#34;_blank&#34;&gt;ISCROSSFILTERED&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значение &lt;code&gt;true&lt;/code&gt; при фильтрации по столбцу columnName или другому столбцу в этой же или связанной таблице.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dn802535.aspx&#34; target=&#34;_blank&#34;&gt;ISONORAFTER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Логическая функция, которая эмулирует поведение предложения &lt;code&gt;Start At&lt;/code&gt; и возвращает &lt;code&gt;true&lt;/code&gt; для строки, которая соответствует всем параметрам условия. Эта функция принимает переменное число аргументов кратное трем (т.н. троек), первые два аргумента в тройке - это сравниваемые выражения, а третий аргумент указывает порядок сортировки. Порядок сортировки по увеличению (по умолчанию) или уменьшению.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634214&#34; target=&#34;_blank&#34;&gt;ISERROR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет, является ли значение ошибкой, и возвращает &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492183&#34; target=&#34;_blank&#34;&gt;CONTAINS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значение &lt;code&gt;true&lt;/code&gt;, если значения для всех столбцов, на которые имеются ссылки, существуют или содержатся в этих столбцах; в противном случае возвращает значение &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492135&#34; target=&#34;_blank&#34;&gt;HASONEFILTER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значение &lt;code&gt;true&lt;/code&gt;, если число значений, отсортированных по columnName, равно одному; в противном случае возвращает значение &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492190&#34; target=&#34;_blank&#34;&gt;HASONEVALUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значение &lt;code&gt;true&lt;/code&gt; при фильтрации содержимого столбца columnName до одного уникального значения. В противном случае возвращается значение &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/hh230954.aspx&#34; target=&#34;_blank&#34;&gt;USERNAME&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает имя домена и имя пользователя из учетных данных, предоставленных системе при подключении.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;filterFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;функции-фильтрации&#34;&gt;Функции фильтрации&lt;/h1&gt;

&lt;p&gt;Функции фильтра и значений DAX относятся к самым мощным и сложным, значительно отличаясь от функций Excel. Функции поиска работают с использованием таблиц и связей, как в базе данных. Функции фильтрации дают возможность управлять контекстом данных для создания динамических вычислений. Описание контекста см. в разделе &lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg413423&#34; target=&#34;_blank&#34;&gt;Контекст в формулах DAX&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492170&#34; target=&#34;_blank&#34;&gt;LOOKUPVALUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значение в столбце result_columnName для строки, соответствующей всем критериям, указанным с помощью параметров search_columnName и search_value.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634825&#34; target=&#34;_blank&#34;&gt;CALCULATE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Вычисляет выражение в контексте, изменяемом указанными фильтрами.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634760&#34; target=&#34;_blank&#34;&gt;CALCULATETABLE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Вычисляет табличное выражение в контексте, изменяемом данными фильтрами.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634202&#34; target=&#34;_blank&#34;&gt;RELATED&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает связанное значение из другой таблицы.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634226&#34; target=&#34;_blank&#34;&gt;RELATEDTABLE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Вычисляет табличное выражение в контексте, изменяемом данными фильтрами.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634802&#34; target=&#34;_blank&#34;&gt;ALL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает все строки в таблице или все значения в столбце, не учитывая применяемые фильтры. Эта функция полезна для очистки фильтров и создания вычислений по всем строкам таблицы.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634795&#34; target=&#34;_blank&#34;&gt;ALLEXCEPT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Удаляет все фильтры контекста в таблице, кроме фильтров, примененных к указанным столбцам.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634793&#34; target=&#34;_blank&#34;&gt;ALLNOBLANKROW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Из родительской таблицы связи возвращает все непустые строки либо все различные значения столбца, за исключением пустых строк, не учитывая существующие фильтры контекста.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492186&#34; target=&#34;_blank&#34;&gt;ALLSELECTED&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Удаляет фильтры содержимого из столбцов и строк в текущем запросе, сохраняя все остальные фильтры содержимого и явные фильтры. Функция ALLSELECTED возвращает содержимое, представляющее все строки и столбцы в запросе, сохраняя явные фильтры и фильтры содержимого, не относящиеся к фильтрам строк и столбцов. Эту функцию можно использовать для получения визуальных итогов в запросах.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634966&#34; target=&#34;_blank&#34;&gt;FILTER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает таблицу, представляющую подмножество другой таблицы или выражения.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492172&#34; target=&#34;_blank&#34;&gt;FILTERS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значения, которые напрямую применяются в качестве фильтров к столбцу columnName.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634943&#34; target=&#34;_blank&#34;&gt;DISTINCT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает таблицу из одного столбца, содержащую уникальные значения из указанного столбца. Другими словами, повторяющиеся значения удаляются, и возвращаются только уникальные значения. &lt;br&gt;&lt;br&gt; &lt;strong&gt;Примечание&lt;/strong&gt; &lt;br&gt;&lt;br&gt; Эту функцию нельзя использовать для возвращения результатов в ячейку или столбец на листе. Функция DISTINCT вкладывается в формулу, чтобы получить список уникальных значений, который можно передать другой функции, а затем выполнить подсчет, суммирование или другие операции.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634547&#34; target=&#34;_blank&#34;&gt;VALUES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает таблицу с одним столбцом, содержащую уникальные значения из указанного столбца или таблицы. Другими словами, повторяющиеся значения удаляются, и возвращаются только уникальные значения. &lt;br&gt;&lt;br&gt; &lt;strong&gt;Примечание&lt;/strong&gt; &lt;br&gt;&lt;br&gt; Эту функцию нельзя использовать для возвращения результатов в ячейку или столбец на листе. Она служит в качестве промежуточной функции, вложенной в формулу, чтобы получить список уникальных значений, которые можно подсчитать или использовать для фильтрации или суммирования других значений.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634551&#34; target=&#34;_blank&#34;&gt;EARLIER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает текущее значение указанного столбца на внешнем этапе вычисления для данного столбца. &lt;br&gt;&lt;br&gt; Функция EARLIER полезна для вложенных вычислений, когда необходимо указать в качестве входного определенное значение и в зависимости от него проводить вычисления. В Microsoft Excel такие вычисления можно выполнять только в контексте текущей строки, однако в DAX можно сохранить входное значение, а затем выполнить вычисление с использованием данных из всей таблицы. &lt;br&gt;&lt;br&gt; Функция EARLIER используется главным образом в контексте вычисляемых столбцов.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634779&#34; target=&#34;_blank&#34;&gt;EARLIEST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает текущее значение указанного столбца на внешнем этапе вычисления для данного столбца.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/hh213140.aspx&#34; target=&#34;_blank&#34;&gt;CUSTOMDATA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает содержимое свойства &lt;code&gt;CustomData&lt;/code&gt; в строке подключения.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;agregateAndstatFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;агрегатные-и-статистические-функции&#34;&gt;Агрегатные и статистические функции&lt;/h1&gt;

&lt;p&gt;Язык выражений анализа данных предоставляет множество функций для вычисления агрегированных выражений. Эти функции:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Схожи со статистическими функциями, используемыми в Microsoft Excel.&lt;/li&gt;
&lt;li&gt;Выполняют статистические выражения.&lt;/li&gt;
&lt;li&gt;Позволяют отфильтровать столбец, прежде чем выполнять статистическую обработку или создавать статистические выражения на основе связанных таблиц.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;agregareTableFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;агрегатные-функции-над-таблицами&#34;&gt;Агрегатные функции над таблицами&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492204&#34; target=&#34;_blank&#34;&gt;ADDCOLUMNS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Добавляет вычисляемые столбцы к выбранной таблице или табличному выражению.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634574&#34; target=&#34;_blank&#34;&gt;COUNTROWS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает количество строк в таблице.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492184&#34; target=&#34;_blank&#34;&gt;ROW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает однострочную таблицу. Эта таблица содержит значения, являющиеся результатом выражения, заданного для каждого столбца.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492198&#34; target=&#34;_blank&#34;&gt;TOPN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает первые $N$ строк таблицы.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492171&#34; target=&#34;_blank&#34;&gt;SUMMARIZE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает сводную таблицу с вычисленными итогами для перечня сгруппированных столбцов.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492168&#34; target=&#34;_blank&#34;&gt;CROSSJOIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает &lt;a href=&#34;https://ru.wikipedia.org/wiki/Прямое_произведение&#34; target=&#34;_blank&#34;&gt;декартово произведение&lt;/a&gt; $1 + N$ таблиц, где $N &amp;gt;= 1$.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492196&#34; target=&#34;_blank&#34;&gt;GENERATE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает декартово произведение всех строк в таблице 1 и таблицы, являющейся результатом вычисления таблицы 2 в контексте текущей строки из таблицы 1.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492206&#34; target=&#34;_blank&#34;&gt;GENERATEALL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Аналогично &lt;code&gt;GENERATE&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/dn802550&#34; target=&#34;_blank&#34;&gt;ISEMPTY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Проверяет, пуста ли таблица.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/mt163693&#34; target=&#34;_blank&#34;&gt;GROUPBY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Функция &lt;code&gt;GROUPBY&lt;/code&gt; аналогична функции &lt;code&gt;SUMMARIZE&lt;/code&gt;. Однако &lt;code&gt;GROUPBY&lt;/code&gt; не выполняет неявный &lt;code&gt;CALCULATE&lt;/code&gt; для любых добавочных столбцов, которые он добавляет. &lt;code&gt;GROUPBY&lt;/code&gt; разрешает использовать новую функцию &lt;code&gt;CURRENTGROUP()&lt;/code&gt; внутри функций агрегации в добавочных столбцах, которые она добавляет. &lt;code&gt;GROUPBY&lt;/code&gt; пытается повторно использовать данные, которые были сгруппированы, что делает его высокоэффективным.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/mt243783&#34; target=&#34;_blank&#34;&gt;INTERSECT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает пересечение строк двух таблиц, сохраняя дубликаты.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/dn802543&#34; target=&#34;_blank&#34;&gt;NATURALINNERJOIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Выполняет внутреннее соединение таблицы с другой таблицей. Таблицы объединены в общие столбцы (по имени) в двух таблицах. Если две таблицы не имеют общих имен столбцов, возвращается ошибка.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/dn802527&#34; target=&#34;_blank&#34;&gt;NATURALLEFTOUTERJOIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Выполняет внутреннее соединение таблицы с другой таблицей. Таблицы объединены в общие столбцы (по имени) в двух таблицах. Если две таблицы не имеют общих имен столбцов, возвращается ошибка.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/mt163696&#34; target=&#34;_blank&#34;&gt;SUMMARIZECOLUMNS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает таблицу-сводку по набору групп.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/dn802530&#34; target=&#34;_blank&#34;&gt;UNION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Создает таблицу объединения (объединения) из пары таблиц.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/mt243784&#34; target=&#34;_blank&#34;&gt;EXCEPT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает строки одной таблицы, которых не существует в другой таблице.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;agregareColumnFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;агрегатные-функции-над-столбцами-и-выражениями&#34;&gt;Агрегатные функции над столбцами и выражениями&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;th&gt;Обычные&lt;sup&gt;&lt;a href=&#34;#normalFunc&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;Тип A&lt;sup&gt;&lt;a href=&#34;#typeAFunc&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;Тип X&lt;sup&gt;&lt;a href=&#34;#typeXFunc&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;Тип AX&lt;sup&gt;&lt;a href=&#34;#typeAXFunc&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Сумма&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634387&#34; target=&#34;_blank&#34;&gt;SUM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634959&#34; target=&#34;_blank&#34;&gt;SUMX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Среднее&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634231&#34; target=&#34;_blank&#34;&gt;AVERAGE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634809&#34; target=&#34;_blank&#34;&gt;AVERAGE&lt;strong&gt;A&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634546&#34; target=&#34;_blank&#34;&gt;AVERAGE&lt;strong&gt;X&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Минимум&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634870&#34; target=&#34;_blank&#34;&gt;MIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634789&#34; target=&#34;_blank&#34;&gt;MIN&lt;strong&gt;A&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634576&#34; target=&#34;_blank&#34;&gt;MIN&lt;strong&gt;X&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Максимум&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634228&#34; target=&#34;_blank&#34;&gt;MAX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634582&#34; target=&#34;_blank&#34;&gt;MAX&lt;strong&gt;A&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634576&#34; target=&#34;_blank&#34;&gt;MAX&lt;strong&gt;X&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Количество значений&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634791&#34; target=&#34;_blank&#34;&gt;COUNT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634956&#34; target=&#34;_blank&#34;&gt;COUNT&lt;strong&gt;A&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634549&#34; target=&#34;_blank&#34;&gt;COUNT&lt;strong&gt;X&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634219&#34; target=&#34;_blank&#34;&gt;COUNT&lt;strong&gt;AX&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Количество пустых значений&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634230&#34; target=&#34;_blank&#34;&gt;COUNTBLANK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Количество разных значений&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492142&#34; target=&#34;_blank&#34;&gt;DISTINCTCOUNT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;statFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;статистические-функции-над-столбцами-и-выражениями&#34;&gt;Статистические функции над столбцами и выражениями&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;th&gt;Обычные&lt;sup&gt;&lt;a href=&#34;#normalFunc&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;Тип X&lt;sup&gt;&lt;a href=&#34;#typeXFunc&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ранг&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492169&#34; target=&#34;_blank&#34;&gt;RANK.EQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492185&#34; target=&#34;_blank&#34;&gt;RANK&lt;strong&gt;X&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Дисперсия всей совокупности&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492143&#34; target=&#34;_blank&#34;&gt;VAR.P&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492202&#34; target=&#34;_blank&#34;&gt;VAR&lt;strong&gt;X&lt;/strong&gt;.P&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Дисперсия выборки&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492133&#34; target=&#34;_blank&#34;&gt;VAR.S&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492132&#34; target=&#34;_blank&#34;&gt;VAR&lt;strong&gt;X&lt;/strong&gt;.S&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Стандартное отклонение всей совокупности&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492207&#34; target=&#34;_blank&#34;&gt;STDEV.P&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492208&#34; target=&#34;_blank&#34;&gt;STDEV&lt;strong&gt;X&lt;/strong&gt;.P&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Стандартное отклонение выборки&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492150&#34; target=&#34;_blank&#34;&gt;STDEV.S&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492205&#34; target=&#34;_blank&#34;&gt;STDEV&lt;strong&gt;X&lt;/strong&gt;.S&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;notesAgregateAndstatFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;замечания-к-агрегатным-и-статистическим-функциям&#34;&gt;Замечания к агрегатным и статистическим функциям&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Обычные&lt;/strong&gt; &lt;a name=&#34;normalFunc&#34;&gt;&lt;/a&gt; - Позволяет вычислить функцию над столбцом. Принимает только числовые значения. &lt;strong&gt;Не производит преобразование данных&lt;/strong&gt; из других типов данных в число, если ячейка содержит:

&lt;ul&gt;
&lt;li&gt;текст - функция не вычисляется и возвращает &lt;a href=&#34;&#34; target=&#34;_blank&#34;&gt;пусто&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;логическое значение - ячейка игнорируется.&lt;/li&gt;
&lt;li&gt;пустое значение - ячейка игнорируется.&lt;/li&gt;
&lt;li&gt;нулевое значение - ячейка учитывается в расчете.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Тип A&lt;/strong&gt; &lt;a name=&#34;typeAFunc&#34;&gt;&lt;/a&gt; - Позволяет вычислить функцию над столбцом. Производит преобразование данных других типов к числу (в отличии от &lt;a href=&#34;#normalFunc&#34;&gt;обычных функций&lt;/a&gt;). Если ячейка содержит:

&lt;ul&gt;
&lt;li&gt;текст - если возможно производится преобразование к числу, иначе&lt;/li&gt;
&lt;li&gt;логическое значение - истина = 1, ложь = 0;
возвращается;&lt;/li&gt;
&lt;li&gt;пустое значение - ячейка игнорируется.&lt;/li&gt;
&lt;li&gt;нулевое значение - ячейка учитывается в расчете.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Тип X&lt;/strong&gt;  &lt;a name=&#34;typeXFunc&#34;&gt;&lt;/a&gt; - Позволяет вычислить функцию над выражением, а не над столбцом отличии от &lt;a href=&#34;#normalFunc&#34;&gt;обычных функций&lt;/a&gt; и функций &lt;a href=&#34;#typeAFunc&#34;&gt;типа A&lt;/a&gt;. В принципе обработки не числовых значений аналогичная &lt;a href=&#34;#normalFunc&#34;&gt;обычной функции&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Тип AX&lt;/strong&gt; &lt;a name=&#34;typeAXFunc&#34;&gt;&lt;/a&gt; - Позволяет вычислить функцию над выражением, а не над столбцом отличии от &lt;a href=&#34;#normalFunc&#34;&gt;обычных функций&lt;/a&gt; и функций &lt;a href=&#34;#typeAFunc&#34;&gt;типа A&lt;/a&gt;. В принципе обработки не числовых значений аналогичная  функциям &lt;a href=&#34;#typeAFunc&#34;&gt;типа A&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;patentChildFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;функции-над-иерархическими-данными&#34;&gt;Функции над иерархическими данными&lt;/h1&gt;

&lt;p&gt;Функции для управления данными, представленными в моделях в виде иерархии типа «родители-потомки». Эти функции можно использовать для получения следующих данных:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Общее количество родительских элементов строки, количество уровней в иерархии до родительского элемента верхнего уровня,&lt;/li&gt;
&lt;li&gt;Идентификатор родительского элемента, расположенного на n уровней выше текущей строки,&lt;/li&gt;
&lt;li&gt;Идентификатор n-потомка, считая от верхнего уровня иерархии.&lt;/li&gt;
&lt;li&gt;Определить, является ли определенный родительский элемент элементом иерархии текущей строки. (см. &lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492192&#34; target=&#34;_blank&#34;&gt;подробнее&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492167&#34; target=&#34;_blank&#34;&gt;PATH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает строку текста с разделителями, содержащую идентификаторы всех родительских элементов текущего идентификатора, с самого старого до текущего.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492187&#34; target=&#34;_blank&#34;&gt;PATHLENGTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает количество родительских элементов указанного элемента в заданных результатах функции PATH, включая сам элемент.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492182&#34; target=&#34;_blank&#34;&gt;PATHCONTAINS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает значение &lt;code&gt;true&lt;/code&gt;, если указанный объект item существует в указанном объекте path.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492134&#34; target=&#34;_blank&#34;&gt;PATHITEM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает элемент с указанным параметром position из строки результатов вычисления функции PATH. Позиции считаются слева направо.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/gg492199&#34; target=&#34;_blank&#34;&gt;PATHITEMREVERSE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает элемент с указанным параметром position из строки результатов вычисления функции PATH. Позиции вычисляются в направлении справа налево.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;otherFunction&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;прочие-функции&#34;&gt;Прочие функции&lt;/h1&gt;

&lt;p&gt;эти функции выполняют уникальные действия, которые не могут быть определены ни одной из других категорий, к которым принадлежит большинство функций.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя функции&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/mt243785&#34; target=&#34;_blank&#34;&gt;VAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Сохраняет результат выражения как именованную переменную, которая затем может быть передана как аргумент другим выражениям. Когда результирующие значения были рассчитаны для выражения переменных, эти значения не изменяются, даже если эта переменная указана в другом выражении.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RETURN&lt;/td&gt;
&lt;td&gt;Возвращает результат вычисления формулы используется совместно с выражением &lt;code&gt;VAR&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://msdn.microsoft.com/ru-ru/ee634820&#34; target=&#34;_blank&#34;&gt;BLANK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Возвращает пустое значение.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;#TOC&#34;&gt;К содержанию&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Заметки с мероприятия Технологии будущего. Microsoft Devcon School</title>
      <link>http://DmitriyVlasov.ru/post/devcon-school-future-technologies/</link>
      <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/post/devcon-school-future-technologies/</guid>
      <description>

&lt;p&gt;1 июня 2017 принял участие в мероприятии &lt;a href=&#34;https://events.techdays.ru/Future-Technologies/2017-06/&#34; target=&#34;_blank&#34;&gt;DevCon School Технологии будущего&lt;/a&gt; проводимого компанией Microsoft. Мероприятие проходило в Москве на территории центра &lt;a href=&#34;digitaloctober.ru/ru&#34; target=&#34;_blank&#34;&gt;Digital October&lt;/a&gt;. Ключевыми темами мероприятия были:  Искусственный интеллект, Блокчейн, Azure Stack и гибридные облака, контейнеры и микросервисы, DevOps и процессы разработки, Безопасная разработка, Машинное обучение.
  &lt;/p&gt;

&lt;h1 id=&#34;подборка-ссылок-на-материалы&#34;&gt;Подборка ссылок на материалы&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLVDsxiCH_PqRIZ84g-1X57Tr6VHBVVevP&#34; target=&#34;_blank&#34;&gt;Запись видео с открытия, интенсива по нейронным сетям и отдельным трекам&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/evangelism/DevCon-School/tree/master/Big%20June%20School&#34; target=&#34;_blank&#34;&gt;Презентации и обучающие материалы с интенсива и большинства треков&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;машинное-обучение&#34;&gt;Машинное обучение&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Определение опечаток в тексте &lt;a href=&#34;https://ru.wikipedia.org/wiki/Расстояние_Левенштейна&#34; target=&#34;_blank&#34;&gt;Алгоритм расстояние Левенштейна&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ru.wikipedia.org/wiki//Метод_обратного_распространения_ошибки&#34; target=&#34;_blank&#34;&gt;Метод обратного распространения ошибки&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bit.ly/deeplearnbox&#34; target=&#34;_blank&#34;&gt;Как выбрать компьютер для машинного обучения&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;NVidia Deep Learning Institute. Практические материалы и учебные курсы по глубокому обучению:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/deep-learning-ai/education/&#34; target=&#34;_blank&#34;&gt;Глобальный портал&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nvidia.ru/deep-learning-ai/education/&#34; target=&#34;_blank&#34;&gt;Российская локализация&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;сообщества&#34;&gt;Сообщества&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Официальный русскоязычный канал в телеграмме &lt;a href=&#34;https://t.me/microsoftschool&#34; target=&#34;_blank&#34;&gt;Microsoft Developer&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Официальный канал Microsoft в телеграмме по &lt;a href=&#34;https://t.me/neuroworkshop&#34; target=&#34;_blank&#34;&gt;машинному обучению и интеллектуальным сервисам&lt;/a&gt;
 &lt;/p&gt;

&lt;h2 id=&#34;обучение&#34;&gt;Обучение&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Если вас заинтересовали прикладные вопросы Машинного обучения и анализа данных рекомендую начать изучение вопроса с блога &lt;a href=&#34;https://habrahabr.ru/users/i_shutov/topics/page2/&#34; target=&#34;_blank&#34;&gt;Ильи Шутова на хабре&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Для комплексного обучения по направлению машинное обучение и анализ данных рекомендую специализацию &lt;a href=&#34;https://www.coursera.org/specializations/machine-learning-data-analysis&#34; target=&#34;_blank&#34;&gt;Машинное обучение и анализ данных от МФТИ и Яндекса&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Учебник библиотеки FParsec</title>
      <link>http://DmitriyVlasov.ru/publication/fparsec-tutorial/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://DmitriyVlasov.ru/publication/fparsec-tutorial/</guid>
      <description>

&lt;h1 id=&#34;введение&#34;&gt;Введение&lt;/h1&gt;

&lt;p&gt;Этот учебник знакомит вас с основными понятиями библиотеки FParsec. Наша цель &amp;mdash; дать вам возможность попробовать создать приложения синтаксического разбора с помощью библиотеки FParsec. Мы охватим только основные идеи и дадим беглый обзор библиотеки по &lt;a href=&#34;https://ru.wikipedia.org/wiki/API&#34; target=&#34;_blank&#34;&gt;API&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;. Но, надеемся, это будет достаточной основой для того, чтобы вы могли в дальнейшем использовать FParsec самостоятельно с помощью: &lt;a href=&#34;http://www.quanttec.com/fparsec/users-guide/&#34; target=&#34;_blank&#34;&gt;руководства пользователя&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;, &lt;a href=&#34;http://www.quanttec.com/fparsec/reference/&#34; target=&#34;_blank&#34;&gt;справочника по API&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt; и примеров синтаксических анализаторов в папке &lt;a href=&#34;https://bitbucket.org/fparsec/main/src/c234349e7b738e09a1b9eb53f5f1ef77d584f09b/Samples/?at=default&#34; target=&#34;_blank&#34;&gt;Samples&lt;/a&gt;&lt;sup&gt;en&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;благодарности&#34;&gt;Благодарности&lt;/h2&gt;

&lt;p&gt;Благодарю мою жену Ольгу за помощь в переводе, стилистической выверке и редактуре теста.&lt;/p&gt;

&lt;h1 id=&#34;оглавление&#34;&gt;Оглавление&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;01-preliminaries&#34; target=&#34;_blank&#34;&gt;Вступление&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;02-parsing-a-single-float&#34; target=&#34;_blank&#34;&gt;Синтаксический анализатор числа с плавающей точкой&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;03-parsing-a-float-between-brackets&#34; target=&#34;_blank&#34;&gt;Синтаксический анализатор числа с плавающей точкой в скобках&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;04-abstracting-parsers&#34; target=&#34;_blank&#34;&gt;Абстрактные синтаксические анализаторы&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;05-parsing-a-list-of-floats&#34; target=&#34;_blank&#34;&gt;Синтаксический анализатор списка чисел с плавающей точкой&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;06-handling-whitespace&#34; target=&#34;_blank&#34;&gt;Обработка пробелов&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;07-parsing-string-data&#34; target=&#34;_blank&#34;&gt;Синтаксический анализатор строковых данных&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;08-sequentially-applying-parsers&#34; target=&#34;_blank&#34;&gt;Использование последовательности синтаксических анализаторов&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;09-parsing-alternatives&#34; target=&#34;_blank&#34;&gt;Использование альтернативных синтаксических анализов&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;10-fsharps-value-restriction&#34; target=&#34;_blank&#34;&gt;Ограничение значений F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;11-parsing-json&#34; target=&#34;_blank&#34;&gt;Синтаксический анализ JSON&lt;/a&gt; (В работе)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;12-what-now&#34; target=&#34;_blank&#34;&gt;Куда дальше?&lt;/a&gt; (В работе)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;учебник-на-других-языках&#34;&gt;Учебник на других языках&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stephan-tolksdorf&#34; target=&#34;_blank&#34;&gt;Стефан Тольксдорф&lt;/a&gt;, авторский текст на &lt;a href=&#34;http://www.quanttec.com/fparsec/tutorial.html&#34; target=&#34;_blank&#34;&gt;английском языке&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/gab_km&#34; target=&#34;_blank&#34;&gt;Gab_km&lt;/a&gt;, перевод на &lt;a href=&#34;http://blog.livedoor.jp/gab_km/archives/1437534.html&#34; target=&#34;_blank&#34;&gt;японский язык&lt;/a&gt;.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
